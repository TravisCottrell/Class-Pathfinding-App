{"ast":null,"code":"export function AStar() {\n  console.log(\"a*\");\n} // function get_neighbors(self, grid){\n//     neighbors = []\n//     for(i in [(0, -1), (0, 1), (-1, 0), (1, 0)]) {\n//         neighbor = (self.row + i[0], self.col + i[1])\n//         box = grid[neighbor[0]][neighbor[1]]\n//         if not box.is_wall(){\n//             neighbors.append(box)\n//         }\n//     }\n//     return neighbors\n// }\n\n_c = AStar;\n\nfunction getNeighbors(node, grid) {\n  // prettier-ignore\n  //loop to get the neighbors in the up/down/left/right positions of the current node\n  for (const i of [[0, -1], [0, 1], [-1, 0], [1, 0]]) {\n    const neighborPosition = [node.row + i[0], node.col + i[1]]; // check if the neighbor node is within the grid bounds\n\n    if (neighborPosition[0] < 0 || neighborPosition[0] > grid[0].length - 1 || neighborPosition[1] < 0 || neighborPosition[1] > grid.length - 1) {\n      continue;\n    }\n\n    ;\n    const neighbor = grid[neighborPosition[1]][neighborPosition[0]];\n\n    if (!neighbor.isWall && !neighbor.isVisited) {\n      //distance is the g score in this instance\n      neighbor.distance = node.distance + 1;\n    }\n  }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AStar\");","map":{"version":3,"sources":["C:/My Projects/pathing-Algorithms/react-app/src/algorithms/pathFinding/AStar.js"],"names":["AStar","console","log","getNeighbors","node","grid","i","neighborPosition","row","col","length","neighbor","isWall","isVisited","distance"],"mappings":"AAAA,OAAO,SAASA,KAAT,GAAgB;AACnBC,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACH,C,CAED;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;KAhBgBF,K;;AAkBhB,SAASG,YAAT,CAAsBC,IAAtB,EAA4BC,IAA5B,EAAkC;AAC9B;AACA;AACA,OAAK,MAAMC,CAAX,IAAgB,CAAC,CAAC,CAAD,EAAI,CAAC,CAAL,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAgB,CAAC,CAAC,CAAF,EAAK,CAAL,CAAhB,EAAwB,CAAC,CAAD,EAAI,CAAJ,CAAxB,CAAhB,EAAiD;AAC7C,UAAMC,gBAAgB,GAAG,CAACH,IAAI,CAACI,GAAL,GAAWF,CAAC,CAAC,CAAD,CAAb,EAAkBF,IAAI,CAACK,GAAL,GAAWH,CAAC,CAAC,CAAD,CAA9B,CAAzB,CAD6C,CAG7C;;AACA,QAAGC,gBAAgB,CAAC,CAAD,CAAhB,GAAsB,CAAtB,IAA2BA,gBAAgB,CAAC,CAAD,CAAhB,GAAsBF,IAAI,CAAC,CAAD,CAAJ,CAAQK,MAAR,GAAe,CAAhE,IAAqEH,gBAAgB,CAAC,CAAD,CAAhB,GAAsB,CAA3F,IAAgGA,gBAAgB,CAAC,CAAD,CAAhB,GAAsBF,IAAI,CAACK,MAAL,GAAY,CAArI,EAAuI;AAAC;AAAS;;AAAA;AAEjJ,UAAMC,QAAQ,GAAGN,IAAI,CAACE,gBAAgB,CAAC,CAAD,CAAjB,CAAJ,CAA0BA,gBAAgB,CAAC,CAAD,CAA1C,CAAjB;;AACA,QAAG,CAACI,QAAQ,CAACC,MAAV,IAAoB,CAACD,QAAQ,CAACE,SAAjC,EAA4C;AACxC;AACAF,MAAAA,QAAQ,CAACG,QAAT,GAAoBV,IAAI,CAACU,QAAL,GAAgB,CAApC;AAEH;AACJ;AACJ","sourcesContent":["export function AStar(){\r\n    console.log(\"a*\");\r\n}\r\n\r\n// function get_neighbors(self, grid){\r\n//     neighbors = []\r\n    \r\n//     for(i in [(0, -1), (0, 1), (-1, 0), (1, 0)]) {\r\n//         neighbor = (self.row + i[0], self.col + i[1])\r\n//         box = grid[neighbor[0]][neighbor[1]]\r\n\r\n//         if not box.is_wall(){\r\n//             neighbors.append(box)\r\n//         }\r\n//     }\r\n//     return neighbors\r\n// }\r\n\r\nfunction getNeighbors(node, grid) {\r\n    // prettier-ignore\r\n    //loop to get the neighbors in the up/down/left/right positions of the current node\r\n    for (const i of [[0, -1],[0, 1],[-1, 0],[1, 0]]) {\r\n        const neighborPosition = [node.row + i[0], node.col + i[1]];\r\n\r\n        // check if the neighbor node is within the grid bounds\r\n        if(neighborPosition[0] < 0 || neighborPosition[0] > grid[0].length-1 || neighborPosition[1] < 0 || neighborPosition[1] > grid.length-1){continue};\r\n        \r\n        const neighbor = grid[neighborPosition[1]][neighborPosition[0]];\r\n        if(!neighbor.isWall && !neighbor.isVisited) {\r\n            //distance is the g score in this instance\r\n            neighbor.distance = node.distance + 1;\r\n            \r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}