{"ast":null,"code":"export function dfs(grid) {\n  const startNode = grid[0][0];\n  const visited = [];\n  const stack = [];\n  stack.push(startNode); //console.log(visited);\n\n  while (visited) {\n    const currentNode = visited.pop();\n    const neighbors = getNeighbors(currentNode, grid, visited);\n    console.log(neighbors);\n\n    for (const neighbor of neighbors) {}\n  }\n}\n\nfunction getNeighbors(node, grid, visited) {\n  // prettier-ignore\n  const neighbors = [];\n\n  for (const i of [[0, -1], [0, 1], [-1, 0], [1, 0]]) {\n    const temp = [node.row + i[0], node.col + i[1]]; // check if the neighbor node is within the grid bounds\n\n    if (temp[0] < 0 || temp[0] > 29 || temp[1] < 0 || temp[1] > 49) {\n      continue;\n    }\n\n    ;\n    const neighbor = grid[temp[1]][temp[0]];\n\n    if (!visited.includes(neighbor)) {\n      neighbors.push(neighbor);\n    }\n  }\n\n  return neighbors;\n}","map":{"version":3,"sources":["C:/My Projects/pathing-Algorithms/react-app/src/algorithms/mazeGen/depthFirst.js"],"names":["dfs","grid","startNode","visited","stack","push","currentNode","pop","neighbors","getNeighbors","console","log","neighbor","node","i","temp","row","col","includes"],"mappings":"AAAA,OAAO,SAASA,GAAT,CAAaC,IAAb,EAAkB;AACrB,QAAMC,SAAS,GAAGD,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAAlB;AACA,QAAME,OAAO,GAAG,EAAhB;AACA,QAAMC,KAAK,GAAG,EAAd;AACAA,EAAAA,KAAK,CAACC,IAAN,CAAWH,SAAX,EAJqB,CAKrB;;AACA,SAAMC,OAAN,EAAc;AACV,UAAMG,WAAW,GAAGH,OAAO,CAACI,GAAR,EAApB;AACA,UAAMC,SAAS,GAAGC,YAAY,CAACH,WAAD,EAAcL,IAAd,EAAoBE,OAApB,CAA9B;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;;AACA,SAAI,MAAMI,QAAV,IAAsBJ,SAAtB,EAAgC,CAE/B;AACJ;AAEJ;;AAED,SAASC,YAAT,CAAsBI,IAAtB,EAA4BZ,IAA5B,EAAkCE,OAAlC,EAA2C;AACvC;AACA,QAAMK,SAAS,GAAG,EAAlB;;AACA,OAAK,MAAMM,CAAX,IAAgB,CAAC,CAAC,CAAD,EAAI,CAAC,CAAL,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAgB,CAAC,CAAC,CAAF,EAAK,CAAL,CAAhB,EAAwB,CAAC,CAAD,EAAI,CAAJ,CAAxB,CAAhB,EAAiD;AAC7C,UAAMC,IAAI,GAAG,CAACF,IAAI,CAACG,GAAL,GAAWF,CAAC,CAAC,CAAD,CAAb,EAAkBD,IAAI,CAACI,GAAL,GAAWH,CAAC,CAAC,CAAD,CAA9B,CAAb,CAD6C,CAE7C;;AAEA,QAAGC,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV,IAAeA,IAAI,CAAC,CAAD,CAAJ,GAAU,EAAzB,IAA+BA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAzC,IAA8CA,IAAI,CAAC,CAAD,CAAJ,GAAU,EAA3D,EAA8D;AAAC;AAAS;;AAAA;AAExE,UAAMH,QAAQ,GAAGX,IAAI,CAACc,IAAI,CAAC,CAAD,CAAL,CAAJ,CAAcA,IAAI,CAAC,CAAD,CAAlB,CAAjB;;AAEA,QAAG,CAACZ,OAAO,CAACe,QAAR,CAAiBN,QAAjB,CAAJ,EAAgC;AAC5BJ,MAAAA,SAAS,CAACH,IAAV,CAAeO,QAAf;AACH;AACJ;;AACD,SAAOJ,SAAP;AACH","sourcesContent":["export function dfs(grid){\r\n    const startNode = grid[0][0];\r\n    const visited = [];\r\n    const stack = [];\r\n    stack.push(startNode);\r\n    //console.log(visited);\r\n    while(visited){\r\n        const currentNode = visited.pop();\r\n        const neighbors = getNeighbors(currentNode, grid, visited);\r\n        console.log(neighbors);\r\n        for(const neighbor of neighbors){\r\n\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction getNeighbors(node, grid, visited) {\r\n    // prettier-ignore\r\n    const neighbors = [];\r\n    for (const i of [[0, -1],[0, 1],[-1, 0],[1, 0]]) {\r\n        const temp = [node.row + i[0], node.col + i[1]];\r\n        // check if the neighbor node is within the grid bounds\r\n        \r\n        if(temp[0] < 0 || temp[0] > 29 || temp[1] < 0 || temp[1] > 49){continue};\r\n        \r\n        const neighbor = grid[temp[1]][temp[0]];\r\n        \r\n        if(!visited.includes(neighbor)) {\r\n            neighbors.push(neighbor);\r\n        }\r\n    }\r\n    return neighbors;\r\n}"]},"metadata":{},"sourceType":"module"}