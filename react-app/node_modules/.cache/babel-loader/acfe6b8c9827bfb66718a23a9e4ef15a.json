{"ast":null,"code":"export function dfs(grid) {\n  const startNode = grid[0][0];\n  const visited = [];\n  visited.push(startNode);\n  console.log(visited);\n\n  while (visited) {\n    const currentNode = visited.pop();\n  }\n}\n\nfunction getNeighbors(node, grid) {\n  // prettier-ignore\n  const neighbors = [];\n\n  for (const i of [[0, -1], [0, 1], [-1, 0], [1, 0]]) {\n    const temp = [node.row + i[0], node.col + i[1]]; // check if the neighbor node is within the grid bounds\n    //console.log('temp', temp);\n\n    if (temp[0] < 0 || temp[0] > 29 || temp[1] < 0 || temp[1] > 49) {\n      continue;\n    }\n\n    ;\n    const neighbor = grid[temp[1]][temp[0]]; //console.log('neighbor', neighbor);\n\n    if (!neighbor.isWall && !neighbor.isVisited) {\n      neighbor.distance = node.distance + 1;\n      neighbor.prevNode = node;\n    }\n  }\n}","map":{"version":3,"sources":["C:/My Projects/pathing-Algorithms/react-app/src/algorithms/mazeGen/depthFirst.js"],"names":["dfs","grid","startNode","visited","push","console","log","currentNode","pop","getNeighbors","node","neighbors","i","temp","row","col","neighbor","isWall","isVisited","distance","prevNode"],"mappings":"AAAA,OAAO,SAASA,GAAT,CAAaC,IAAb,EAAkB;AACrB,QAAMC,SAAS,GAAGD,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAAlB;AACA,QAAME,OAAO,GAAG,EAAhB;AACAA,EAAAA,OAAO,CAACC,IAAR,CAAaF,SAAb;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;;AACA,SAAMA,OAAN,EAAc;AACV,UAAMI,WAAW,GAAGJ,OAAO,CAACK,GAAR,EAApB;AAEH;AAEJ;;AAED,SAASC,YAAT,CAAsBC,IAAtB,EAA4BT,IAA5B,EAAkC;AAC9B;AACA,QAAMU,SAAS,GAAG,EAAlB;;AACA,OAAK,MAAMC,CAAX,IAAgB,CAAC,CAAC,CAAD,EAAI,CAAC,CAAL,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAgB,CAAC,CAAC,CAAF,EAAK,CAAL,CAAhB,EAAwB,CAAC,CAAD,EAAI,CAAJ,CAAxB,CAAhB,EAAiD;AAC7C,UAAMC,IAAI,GAAG,CAACH,IAAI,CAACI,GAAL,GAAWF,CAAC,CAAC,CAAD,CAAb,EAAkBF,IAAI,CAACK,GAAL,GAAWH,CAAC,CAAC,CAAD,CAA9B,CAAb,CAD6C,CAE7C;AACA;;AACA,QAAGC,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV,IAAeA,IAAI,CAAC,CAAD,CAAJ,GAAU,EAAzB,IAA+BA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAzC,IAA8CA,IAAI,CAAC,CAAD,CAAJ,GAAU,EAA3D,EAA8D;AAAC;AAAS;;AAAA;AAExE,UAAMG,QAAQ,GAAGf,IAAI,CAACY,IAAI,CAAC,CAAD,CAAL,CAAJ,CAAcA,IAAI,CAAC,CAAD,CAAlB,CAAjB,CAN6C,CAO7C;;AACA,QAAG,CAACG,QAAQ,CAACC,MAAV,IAAoB,CAACD,QAAQ,CAACE,SAAjC,EAA4C;AAExCF,MAAAA,QAAQ,CAACG,QAAT,GAAoBT,IAAI,CAACS,QAAL,GAAgB,CAApC;AACAH,MAAAA,QAAQ,CAACI,QAAT,GAAoBV,IAApB;AACH;AACJ;AACJ","sourcesContent":["export function dfs(grid){\r\n    const startNode = grid[0][0];\r\n    const visited = [];\r\n    visited.push(startNode);\r\n    console.log(visited);\r\n    while(visited){\r\n        const currentNode = visited.pop();\r\n        \r\n    }\r\n\r\n}\r\n\r\nfunction getNeighbors(node, grid) {\r\n    // prettier-ignore\r\n    const neighbors = [];\r\n    for (const i of [[0, -1],[0, 1],[-1, 0],[1, 0]]) {\r\n        const temp = [node.row + i[0], node.col + i[1]];\r\n        // check if the neighbor node is within the grid bounds\r\n        //console.log('temp', temp);\r\n        if(temp[0] < 0 || temp[0] > 29 || temp[1] < 0 || temp[1] > 49){continue};\r\n        \r\n        const neighbor = grid[temp[1]][temp[0]];\r\n        //console.log('neighbor', neighbor);\r\n        if(!neighbor.isWall && !neighbor.isVisited) {\r\n            \r\n            neighbor.distance = node.distance + 1;\r\n            neighbor.prevNode = node; \r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}