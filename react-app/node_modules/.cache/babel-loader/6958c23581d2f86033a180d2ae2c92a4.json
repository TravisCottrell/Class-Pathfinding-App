{"ast":null,"code":"export function recursiveDivision(grid, rowStart, colStart, rowEnd, width, orientation) {\n  if (width < 2 || height < 2) return;\n  let isHorizontal = orientation; //get the column or row that a wall will be drawn in\n\n  const wallrow = row + (isHorizontal ? 0 : Math.floor(Math.random() * width - 2));\n  const wallcol = col + (isHorizontal ? Math.floor(Math.random() * height - 2) : 0);\n  console.log(\"wallrow\", wallrow);\n  console.log(\"wallcol\", wallcol); //random node in the wall will be selected as a passage\n\n  const passageRow = wallrow + (isHorizontal ? Math.floor(Math.random() * width) : 0);\n  const passageCol = wallcol + (isHorizontal ? 0 : Math.floor(Math.random() * height));\n  console.log(\"passrow\", passageRow);\n  console.log(\"passcol\", passageCol); //draw the wall\n\n  if (isHorizontal) {\n    for (let i = 0; i < width - 1; i++) {\n      grid[i][wallcol].isWall = true;\n    }\n  } else {\n    for (let i = 0; i < height - 1; i++) {\n      grid[wallrow][i].isWall = true;\n    }\n  }\n\n  grid[passageRow][passageCol].isWall = false;\n  let newHeight1 = height;\n  let newHeight2 = height;\n  let newWidth1 = width;\n  let newWidth2 = width;\n\n  if (isHorizontal) {\n    newHeight1 = wallcol + 1;\n    newHeight2 = row + height;\n  } else {\n    newWidth1 = width - row + 1;\n    newWidth2 = col + width;\n  }\n\n  recursiveDivision(grid, row, col, newHeight1, newWidth1, getOrientation(newHeight1, newWidth1));\n  recursiveDivision(grid, row, col, newHeight2, newWidth2, getOrientation(newHeight2, newWidth2));\n}\nexport function getOrientation(height, width) {\n  if (width < height) {\n    //is horizontal\n    return true;\n  } else if (height < width) {\n    // is vertical\n    return false;\n  } else {\n    const rand = Math.floor(Math.random() * 2);\n    return rand === 0 ? true : false;\n  }\n}","map":{"version":3,"sources":["C:/My Projects/pathing-Algorithms/react-app/src/algorithms/mazeGen/recursiveDivision.js"],"names":["recursiveDivision","grid","rowStart","colStart","rowEnd","width","orientation","height","isHorizontal","wallrow","row","Math","floor","random","wallcol","col","console","log","passageRow","passageCol","i","isWall","newHeight1","newHeight2","newWidth1","newWidth2","getOrientation","rand"],"mappings":"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","sourcesContent":["export function recursiveDivision(grid,rowStart, colStart, rowEnd, width, orientation){\r\n    if(width < 2 || height < 2)return;\r\n\r\n    let isHorizontal = orientation;\r\n\r\n    //get the column or row that a wall will be drawn in\r\n    const wallrow = row + (isHorizontal ? 0 : Math.floor(Math.random() * width - 2));\r\n    const wallcol = col + (isHorizontal ? Math.floor(Math.random() * height - 2) : 0);\r\n    console.log(\"wallrow\", wallrow);\r\n    console.log(\"wallcol\", wallcol);\r\n\r\n    //random node in the wall will be selected as a passage\r\n    const passageRow = wallrow + (isHorizontal ? Math.floor(Math.random() * width) : 0);\r\n    const passageCol = wallcol + (isHorizontal ? 0 : Math.floor(Math.random() * height));\r\n    console.log(\"passrow\", passageRow);\r\n    console.log(\"passcol\", passageCol);\r\n\r\n    //draw the wall\r\n    if(isHorizontal){\r\n        for(let i = 0; i < width-1; i++){\r\n            grid[i][wallcol].isWall = true;\r\n        }  \r\n    }else{\r\n        for(let i = 0; i < height-1; i++){\r\n            grid[wallrow][i].isWall = true;\r\n        }\r\n    }\r\n    grid[passageRow][passageCol].isWall = false;\r\n\r\n\r\n    let newHeight1 = height;\r\n    let newHeight2 = height;\r\n    let newWidth1 = width;\r\n    let newWidth2= width;\r\n\r\n    if(isHorizontal){\r\n        newHeight1 =  wallcol + 1;\r\n        newHeight2 = row + height ;\r\n    }else{\r\n        newWidth1 = width - row + 1;\r\n        newWidth2 = col + width ;\r\n    }\r\n    recursiveDivision(grid,row, col, newHeight1, newWidth1, getOrientation( newHeight1, newWidth1));\r\n    recursiveDivision(grid,row, col, newHeight2, newWidth2, getOrientation(newHeight2, newWidth2));\r\n    \r\n}\r\n\r\nexport function getOrientation(height, width){\r\n    if(width < height){//is horizontal\r\n        return true;\r\n    }else if(height < width){ // is vertical\r\n        return false;\r\n    }else{\r\n        const rand = Math.floor(Math.random() * 2);\r\n        return rand === 0  ? true : false;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}