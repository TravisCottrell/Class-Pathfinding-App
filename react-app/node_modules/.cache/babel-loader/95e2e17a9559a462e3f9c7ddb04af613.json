{"ast":null,"code":"var _jsxFileName = \"C:\\\\My Projects\\\\pathing-Algorithms\\\\react-app\\\\src\\\\components\\\\pathingApp.jsx\";\nimport React, { Component } from \"react\";\nimport Node from \"./node/node\";\nimport { dijkstra, getShortestPath } from \"../algorithms/pathFinding/dijkstra.js\";\nimport { randomMaze } from \"../algorithms/mazeGen/randomMaze\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst gridSizeCol = 50;\nconst gridSizeRow = 30;\n\nclass Pathing extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      startSet: false,\n      startNode: null,\n      finishSet: false,\n      finishNode: null,\n      mouseisDown: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = [];\n\n    for (let row = 0; row < gridSizeCol; row++) {\n      const currentrow = [];\n\n      for (let col = 0; col < gridSizeRow; col++) {\n        currentrow.push(this.createNode(row, col));\n      }\n\n      grid.push(currentrow);\n    }\n\n    this.setState({\n      grid\n    });\n  }\n\n  createNode(col, row) {\n    return {\n      col,\n      row,\n      distance: Infinity,\n      prevNode: null,\n      isStart: false,\n      isFinish: false,\n      isWall: false,\n      isVisited: false,\n      isVisitedAnimate: false,\n      pathAnimate: false\n    };\n  }\n\n  handleMouseDown(row, col, nodeClass) {\n    if (nodeClass === \"start\") {\n      this.state.grid[col][row].isStart = true; //console.log(this.state.grid[col][row]);\n\n      this.setState({\n        startSet: true,\n        startNode: this.state.grid[col][row],\n        grid: this.state.grid\n      });\n    } else if (nodeClass === \"finish\") {\n      this.state.grid[col][row].isFinish = true;\n      this.setState({\n        finishSet: true,\n        finishNode: this.state.grid[col][row],\n        grid: this.state.grid\n      });\n    } else if (nodeClass === \"wall\") {\n      this.state.grid[col][row].isWall = true;\n      this.setState({\n        grid: this.state.grid\n      });\n    }\n\n    this.setState({\n      mouseisDown: true\n    }); //console.log(`handle row-${row}, col-${col}`);\n  }\n\n  handleMouseEnter(row, col, nodeClass) {\n    if (nodeClass === \"start\") {\n      this.state.grid[col][row].isStart = true; //console.log(this.state.grid[col][row]);\n\n      this.setState({\n        startSet: true,\n        startNode: this.state.grid[col][row],\n        grid: this.state.grid\n      });\n    } else if (nodeClass === \"finish\") {\n      this.state.grid[col][row].isFinish = true;\n      this.setState({\n        finishSet: true,\n        finishNode: this.state.grid[col][row],\n        grid: this.state.grid\n      });\n    } else if (nodeClass === \"wall\") {\n      this.state.grid[col][row].isWall = true;\n      this.setState({\n        grid: this.state.grid\n      });\n    }\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseisDown: false\n    });\n  }\n\n  handleDijkstra() {\n    // prettier-ignore\n    const vistedNodes = dijkstra(this.state.startNode, this.state.finishNode, this.state.grid);\n    const path = getShortestPath(this.state.finishNode);\n\n    for (let i = 0; i < vistedNodes.length; i++) {\n      setTimeout(() => {\n        vistedNodes[i].isVisitedAnimate = true;\n        this.setState({});\n      }, 20 * i);\n\n      if (i === vistedNodes.length - 1) {\n        setTimeout(() => {\n          this.showPath(path);\n        }, 20 * i);\n      }\n    }\n  }\n\n  showPath(path) {\n    for (let i = 0; i < path.length; i++) {\n      setTimeout(() => {\n        path[i].pathAnimate = true;\n        this.setState({});\n      }, 40 * i);\n    }\n  }\n\n  handleMazeGen(event) {\n    switch (event.target.maze) {\n      case 'randomMaze':\n        randomMaze(this.state.grid);\n    }\n\n    this.setState({});\n  }\n\n  render() {\n    const {\n      grid,\n      startSet,\n      finishSet\n    } = this.state; //console.log(\"full grid\", grid);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleDijkstra(),\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: this.state.maze,\n        onChange: this.handleMazeGen,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"randomMaze\",\n          children: \"random maze\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"recursiveDivision\",\n          children: \"recursive division\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleMazeGen(),\n        children: \"build maze\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nodes\",\n          children: grid.map((row, rowindex) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: row.map((node, nodeindex) => {\n                const {\n                  row,\n                  col,\n                  isStart,\n                  isFinish,\n                  isWall,\n                  isVisited,\n                  isVisitedAnimate,\n                  pathAnimate\n                } = node; // prettier-ignore\n\n                return /*#__PURE__*/_jsxDEV(Node, {\n                  row: row,\n                  col: col,\n                  startSet: startSet,\n                  finishSet: finishSet,\n                  isStart: isStart,\n                  isFinish: isFinish,\n                  isWall: isWall,\n                  isVisited: isVisited,\n                  isVisitedAnimate: isVisitedAnimate,\n                  pathAnimate: pathAnimate,\n                  mouseisDown: this.state.mouseisDown,\n                  onMouseDown: (row, col, nodeClass) => this.handleMouseDown(row, col, nodeClass),\n                  onMouseEnter: (row, col, nodeClass) => this.handleMouseEnter(row, col, nodeClass),\n                  onMouseUp: () => this.handleMouseUp()\n                }, nodeindex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 45\n                }, this);\n              })\n            }, rowindex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Pathing;","map":{"version":3,"sources":["C:/My Projects/pathing-Algorithms/react-app/src/components/pathingApp.jsx"],"names":["React","Component","Node","dijkstra","getShortestPath","randomMaze","gridSizeCol","gridSizeRow","Pathing","constructor","props","state","grid","startSet","startNode","finishSet","finishNode","mouseisDown","componentDidMount","row","currentrow","col","push","createNode","setState","distance","Infinity","prevNode","isStart","isFinish","isWall","isVisited","isVisitedAnimate","pathAnimate","handleMouseDown","nodeClass","handleMouseEnter","handleMouseUp","handleDijkstra","vistedNodes","path","i","length","setTimeout","showPath","handleMazeGen","event","target","maze","render","map","rowindex","node","nodeindex"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Node from \"./node/node\";\r\nimport { dijkstra, getShortestPath } from \"../algorithms/pathFinding/dijkstra.js\";\r\nimport { randomMaze } from \"../algorithms/mazeGen/randomMaze\";\r\n\r\nconst gridSizeCol = 50;\r\nconst gridSizeRow = 30;\r\n\r\nclass Pathing extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            startSet: false,\r\n            startNode: null,\r\n            finishSet: false,\r\n            finishNode: null,\r\n            mouseisDown: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const grid = [];\r\n        for (let row = 0; row < gridSizeCol; row++) {\r\n            const currentrow = [];\r\n            for (let col = 0; col < gridSizeRow; col++) {\r\n                currentrow.push(this.createNode(row, col));\r\n            }\r\n            grid.push(currentrow);\r\n        }\r\n        this.setState({ grid });\r\n    }\r\n\r\n    createNode(col, row) {\r\n        return {\r\n            col,\r\n            row,\r\n            distance: Infinity,\r\n            prevNode: null,\r\n            isStart: false,\r\n            isFinish: false,\r\n            isWall: false,\r\n            isVisited: false,\r\n            isVisitedAnimate: false,\r\n            pathAnimate: false,\r\n        };\r\n    }\r\n\r\n    handleMouseDown(row, col, nodeClass) {\r\n        if (nodeClass === \"start\") {\r\n            this.state.grid[col][row].isStart = true;\r\n            //console.log(this.state.grid[col][row]);\r\n            this.setState({\r\n                startSet: true,\r\n                startNode: this.state.grid[col][row],\r\n                grid: this.state.grid,\r\n            });\r\n        } else if (nodeClass === \"finish\") {\r\n            this.state.grid[col][row].isFinish = true;\r\n            this.setState({\r\n                finishSet: true,\r\n                finishNode: this.state.grid[col][row],\r\n                grid: this.state.grid,\r\n            });\r\n        } else if (nodeClass === \"wall\") {\r\n            this.state.grid[col][row].isWall = true;\r\n            this.setState({\r\n                grid: this.state.grid,\r\n            });\r\n        }\r\n        this.setState({mouseisDown: true});\r\n        //console.log(`handle row-${row}, col-${col}`);\r\n    }\r\n\r\n    handleMouseEnter(row, col, nodeClass) {\r\n        if (nodeClass === \"start\") {\r\n            this.state.grid[col][row].isStart = true;\r\n            //console.log(this.state.grid[col][row]);\r\n            this.setState({\r\n                startSet: true,\r\n                startNode: this.state.grid[col][row],\r\n                grid: this.state.grid,\r\n            });\r\n        } else if (nodeClass === \"finish\") {\r\n            this.state.grid[col][row].isFinish = true;\r\n            this.setState({\r\n                finishSet: true,\r\n                finishNode: this.state.grid[col][row],\r\n                grid: this.state.grid,\r\n            });\r\n        } else if (nodeClass === \"wall\") {\r\n            this.state.grid[col][row].isWall = true;\r\n            this.setState({\r\n                grid: this.state.grid,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleMouseUp(){\r\n        this.setState({mouseisDown: false});\r\n    }\r\n\r\n \r\n\r\n    handleDijkstra() {\r\n        // prettier-ignore\r\n        const vistedNodes = dijkstra(this.state.startNode, this.state.finishNode, this.state.grid);\r\n        const path = getShortestPath(this.state.finishNode);\r\n\r\n        for (let i = 0; i < vistedNodes.length; i++) {\r\n            setTimeout(() => {\r\n                vistedNodes[i].isVisitedAnimate = true;\r\n                this.setState({});\r\n            }, 20 * i);\r\n\r\n            if (i === vistedNodes.length - 1) {\r\n                setTimeout(() => {\r\n                    this.showPath(path);\r\n                }, 20 * i);\r\n            }\r\n        }\r\n    }\r\n\r\n    showPath(path) {\r\n        for (let i = 0; i < path.length; i++) {\r\n            setTimeout(() => {\r\n                path[i].pathAnimate = true;\r\n                this.setState({});\r\n            }, 40 * i);\r\n        }\r\n    }\r\n\r\n    handleMazeGen(event){\r\n        switch(event.target.maze){\r\n            case 'randomMaze':\r\n                randomMaze(this.state.grid);\r\n        }\r\n        \r\n        this.setState({});\r\n    }\r\n\r\n    render() {\r\n        const { grid, startSet, finishSet } = this.state;\r\n        //console.log(\"full grid\", grid);\r\n        return (\r\n            <div>\r\n                <button onClick={() => this.handleDijkstra()}>Start</button>\r\n                <form></form>\r\n                    <select value={this.state.maze} onChange={this.handleMazeGen}>\r\n                        <option value=\"randomMaze\">random maze</option>\r\n                        <option value=\"recursiveDivision\">recursive division</option>\r\n                    </select>\r\n                <button onClick={() => this.handleMazeGen()} >build maze</button>\r\n                <div className=\"grid\">\r\n                    <div className=\"nodes\">\r\n                        {grid.map((row, rowindex) => {\r\n                            return (\r\n                                <div key={rowindex}>\r\n                                    {row.map((node, nodeindex) => {\r\n                                        const {\r\n                                            row,\r\n                                            col,\r\n                                            isStart,\r\n                                            isFinish,\r\n                                            isWall,\r\n                                            isVisited,\r\n                                            isVisitedAnimate,\r\n                                            pathAnimate,\r\n                                        } = node;\r\n                                        // prettier-ignore\r\n                                        return (\r\n                                            <Node\r\n                                                key={nodeindex}\r\n                                                row={row}\r\n                                                col={col}\r\n                                                startSet={startSet}\r\n                                                finishSet={finishSet}\r\n                                                isStart={isStart}\r\n                                                isFinish={isFinish}\r\n                                                isWall={isWall}\r\n                                                isVisited={isVisited}\r\n                                                isVisitedAnimate={isVisitedAnimate}\r\n                                                pathAnimate={pathAnimate}\r\n                                                mouseisDown={this.state.mouseisDown}\r\n                                                onMouseDown={(row,col,nodeClass) => this.handleMouseDown(row, col, nodeClass)}\r\n                                                onMouseEnter={(row,col,nodeClass) => this.handleMouseEnter(row, col, nodeClass)}\r\n                                                onMouseUp={() => this.handleMouseUp()}\r\n                                            ></Node>\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pathing;\r\n"]},"metadata":{},"sourceType":"module"}