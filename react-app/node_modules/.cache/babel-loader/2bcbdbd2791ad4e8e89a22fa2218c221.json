{"ast":null,"code":"var _jsxFileName = \"C:\\\\My Projects\\\\pathing-Algorithms\\\\react-app\\\\src\\\\components\\\\pathingApp.jsx\";\nimport React, { Component } from \"react\";\nimport Node from \"./node/node\";\nimport { dijkstra } from \"../algorithms/dijkstra.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst gridSizeCol = 20;\nconst gridSizeRow = 20;\n\nclass Pathing extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      startSet: false,\n      startNode: null,\n      finishSet: false,\n      finishNode: null\n    };\n  }\n\n  componentDidMount() {\n    const grid = [];\n\n    for (let row = 0; row < gridSizeCol; row++) {\n      const currentrow = [];\n\n      for (let col = 0; col < gridSizeRow; col++) {\n        currentrow.push(this.createNode(row, col));\n      }\n\n      grid.push(currentrow);\n    }\n\n    this.setState({\n      grid\n    });\n  }\n\n  createNode(col, row) {\n    return {\n      col,\n      row,\n      distance: Infinity,\n      prevNode: null,\n      isStart: false,\n      isFinish: false,\n      isWall: false\n    };\n  }\n\n  handleMouseDown(row, col, nodeClass) {\n    console.log(nodeClass);\n\n    if (nodeClass === \"start\") {\n      this.setState({\n        startSet: true,\n        startNode: this.state.grid[col][row]\n      });\n      grid[col][row].isS;\n    } else if (nodeClass === \"finish\") {\n      this.setState({\n        finishSet: true,\n        finishNode: this.state.grid[col][row]\n      });\n    }\n\n    console.log(`handle row-${row}, col-${col}`);\n  }\n\n  handleDijkstra() {\n    const temp = dijkstra(this.state.startNode, this.state.finishNode, this.state.grid);\n  }\n\n  render() {\n    const {\n      grid,\n      startSet,\n      finishSet\n    } = this.state;\n    console.log(\"full grid\", grid);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleDijkstra(),\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nodes\",\n          children: grid.map((row, rowindex) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: row.map((node, nodeindex) => {\n                const {\n                  row,\n                  col,\n                  isStart,\n                  isFinish,\n                  isWall\n                } = node; // prettier-ignore\n\n                return /*#__PURE__*/_jsxDEV(Node, {\n                  row: row,\n                  col: col,\n                  startSet: startSet,\n                  finishSet: finishSet,\n                  isStart: isStart,\n                  isFinish: isFinish,\n                  isWall: isWall,\n                  onMouseDown: (row, col, nodeClass) => this.handleMouseDown(row, col, nodeClass)\n                }, nodeindex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 45\n                }, this);\n              })\n            }, rowindex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst handleStart = data => {\n  console.log(data);\n};\n\nexport default Pathing;","map":{"version":3,"sources":["C:/My Projects/pathing-Algorithms/react-app/src/components/pathingApp.jsx"],"names":["React","Component","Node","dijkstra","gridSizeCol","gridSizeRow","Pathing","constructor","props","state","grid","startSet","startNode","finishSet","finishNode","componentDidMount","row","currentrow","col","push","createNode","setState","distance","Infinity","prevNode","isStart","isFinish","isWall","handleMouseDown","nodeClass","console","log","isS","handleDijkstra","temp","render","map","rowindex","node","nodeindex","handleStart","data"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Node from \"./node/node\";\r\nimport { dijkstra } from \"../algorithms/dijkstra.js\";\r\n\r\nconst gridSizeCol = 20;\r\nconst gridSizeRow = 20;\r\n\r\nclass Pathing extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            startSet: false,\r\n            startNode: null,\r\n            finishSet: false,\r\n            finishNode: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const grid = [];\r\n        for (let row = 0; row < gridSizeCol; row++) {\r\n            const currentrow = [];\r\n            for (let col = 0; col < gridSizeRow; col++) {\r\n                currentrow.push(this.createNode(row, col));\r\n            }\r\n            grid.push(currentrow);\r\n        }\r\n        this.setState({ grid });\r\n    }\r\n\r\n    createNode(col, row) {\r\n        return {\r\n            col,\r\n            row,\r\n            distance: Infinity,\r\n            prevNode: null,\r\n            isStart: false,\r\n            isFinish: false,\r\n            isWall: false,\r\n        };\r\n    }\r\n\r\n    handleMouseDown(row, col, nodeClass) {\r\n        console.log(nodeClass);\r\n        if (nodeClass === \"start\") {\r\n            this.setState({\r\n                startSet: true,\r\n                startNode: this.state.grid[col][row],\r\n            });\r\n            grid[col][row].isS\r\n        } else if (nodeClass === \"finish\") {\r\n            this.setState({\r\n                finishSet: true,\r\n                finishNode: this.state.grid[col][row],\r\n            });\r\n        }\r\n\r\n        console.log(`handle row-${row}, col-${col}`);\r\n    }\r\n\r\n    handleDijkstra() {\r\n        const temp = dijkstra(\r\n            this.state.startNode,\r\n            this.state.finishNode,\r\n            this.state.grid\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { grid, startSet, finishSet } = this.state;\r\n        console.log(\"full grid\", grid);\r\n\r\n        return (\r\n            <div>\r\n                <button onClick={() => this.handleDijkstra()}>Start</button>\r\n                <div className=\"grid\">\r\n                    <div className=\"nodes\">\r\n                        {grid.map((row, rowindex) => {\r\n                            return (\r\n                                <div key={rowindex}>\r\n                                    {row.map((node, nodeindex) => {\r\n                                        const { row, col, isStart, isFinish, isWall } = node;\r\n                                        // prettier-ignore\r\n                                        return (\r\n                                            <Node\r\n                                                key={nodeindex}\r\n                                                row={row}\r\n                                                col={col}\r\n                                                startSet={startSet}\r\n                                                finishSet={finishSet}\r\n                                                isStart={isStart}\r\n                                                isFinish={isFinish}\r\n                                                isWall={isWall}\r\n                                                onMouseDown={(row,col,nodeClass) => this.handleMouseDown(row, col, nodeClass)}\r\n                                            ></Node>\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst handleStart = (data) => {\r\n    console.log(data);\r\n};\r\n\r\nexport default Pathing;\r\n"]},"metadata":{},"sourceType":"module"}