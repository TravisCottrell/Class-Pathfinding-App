{"ast":null,"code":"export function dijkstra(start, end, grid) {\n  let unvistedNodes = getNodes(grid);\n  let vistedNodes = [];\n  start.distance = 0;\n\n  while (unvistedNodes.length >= 0) {\n    sortNodes(unvistedNodes);\n    const currentNode = unvistedNodes.shift();\n    neighbors = getNeighbors(currentNode, grid);\n  }\n} //turns the 2d array into a 1d array for easier usage\n\nfunction getNodes(grid) {\n  const newGrid = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      newGrid.push(node);\n    }\n  }\n\n  return newGrid;\n}\n\nfunction sortNodes(unvisitedNodes) {\n  unvisitedNodes.sort((a, b) => a.distance - b.distance);\n}\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n\n  for (const i of [[0, -1], [0, 1], [-1, 0], [1, 0]]) {\n    const temp = (node.row + i[0], node.col + i[1]);\n    const neighbor = grid[temp[0]][temp[1]];\n\n    if (!temp.isWall) {\n      neighbors.push(neighbor);\n    }\n  }\n\n  return neighbors;\n}","map":{"version":3,"sources":["C:/My Projects/pathing-Algorithms/react-app/src/algorithms/dijkstra.js"],"names":["dijkstra","start","end","grid","unvistedNodes","getNodes","vistedNodes","distance","length","sortNodes","currentNode","shift","neighbors","getNeighbors","newGrid","row","node","push","unvisitedNodes","sort","a","b","i","temp","col","neighbor","isWall"],"mappings":"AAAA,OAAO,SAASA,QAAT,CAAkBC,KAAlB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoC;AACvC,MAAIC,aAAa,GAAGC,QAAQ,CAACF,IAAD,CAA5B;AACA,MAAIG,WAAW,GAAG,EAAlB;AACAL,EAAAA,KAAK,CAACM,QAAN,GAAiB,CAAjB;;AAEA,SAAOH,aAAa,CAACI,MAAd,IAAwB,CAA/B,EAAkC;AAC9BC,IAAAA,SAAS,CAACL,aAAD,CAAT;AACA,UAAMM,WAAW,GAAGN,aAAa,CAACO,KAAd,EAApB;AACAC,IAAAA,SAAS,GAAGC,YAAY,CAACH,WAAD,EAAcP,IAAd,CAAxB;AACH;AACJ,C,CAGD;;AACA,SAASE,QAAT,CAAkBF,IAAlB,EAAuB;AACnB,QAAMW,OAAO,GAAG,EAAhB;;AACA,OAAI,MAAMC,GAAV,IAAiBZ,IAAjB,EAAsB;AAClB,SAAI,MAAMa,IAAV,IAAkBD,GAAlB,EAAsB;AAClBD,MAAAA,OAAO,CAACG,IAAR,CAAaD,IAAb;AACH;AACJ;;AACD,SAAOF,OAAP;AACH;;AAED,SAASL,SAAT,CAAmBS,cAAnB,EAAkC;AAC9BA,EAAAA,cAAc,CAACC,IAAf,CAAoB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACb,QAAF,GAAac,CAAC,CAACd,QAA7C;AACH;;AAED,SAASM,YAAT,CAAsBG,IAAtB,EAA4Bb,IAA5B,EAAiC;AAC7B,QAAMS,SAAS,GAAG,EAAlB;;AACA,OAAI,MAAMU,CAAV,IAAe,CAAC,CAAC,CAAD,EAAI,CAAC,CAAL,CAAD,EAAU,CAAC,CAAD,EAAI,CAAJ,CAAV,EAAkB,CAAC,CAAC,CAAF,EAAK,CAAL,CAAlB,EAA2B,CAAC,CAAD,EAAI,CAAJ,CAA3B,CAAf,EAAkD;AAC9C,UAAMC,IAAI,IAAIP,IAAI,CAACD,GAAL,GAAWO,CAAC,CAAC,CAAD,CAAZ,EAAiBN,IAAI,CAACQ,GAAL,GAAWF,CAAC,CAAC,CAAD,CAAjC,CAAV;AACA,UAAMG,QAAQ,GAAGtB,IAAI,CAACoB,IAAI,CAAC,CAAD,CAAL,CAAJ,CAAcA,IAAI,CAAC,CAAD,CAAlB,CAAjB;;AAEA,QAAG,CAACA,IAAI,CAACG,MAAT,EAAgB;AACZd,MAAAA,SAAS,CAACK,IAAV,CAAeQ,QAAf;AACH;AACJ;;AACD,SAAOb,SAAP;AACH","sourcesContent":["export function dijkstra(start, end, grid) {\r\n    let unvistedNodes = getNodes(grid);\r\n    let vistedNodes = [];\r\n    start.distance = 0;\r\n    \r\n    while (unvistedNodes.length >= 0) {\r\n        sortNodes(unvistedNodes);\r\n        const currentNode = unvistedNodes.shift();\r\n        neighbors = getNeighbors(currentNode, grid);\r\n    }\r\n}\r\n\r\n\r\n//turns the 2d array into a 1d array for easier usage\r\nfunction getNodes(grid){\r\n    const newGrid = [];\r\n    for(const row of grid){\r\n        for(const node of row){\r\n            newGrid.push(node);\r\n        }\r\n    }\r\n    return newGrid;\r\n}\r\n\r\nfunction sortNodes(unvisitedNodes){\r\n    unvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n}\r\n\r\nfunction getNeighbors(node, grid){\r\n    const neighbors = [];\r\n    for(const i of [[0, -1], [0, 1], [-1, 0], [1, 0]]){\r\n        const temp = (node.row + i[0], node.col + i[1]);\r\n        const neighbor = grid[temp[0]][temp[1]];\r\n    \r\n        if(!temp.isWall){\r\n            neighbors.push(neighbor);\r\n        }\r\n    }\r\n    return neighbors;\r\n}"]},"metadata":{},"sourceType":"module"}