{"ast":null,"code":"var _jsxFileName = \"C:\\\\My Projects\\\\pathing-Algorithms\\\\react-app\\\\src\\\\components\\\\pathingApp.jsx\";\nimport React, { Component } from \"react\";\nimport Node from \"./node/node\";\nimport { dijkstra, getShortestPath } from \"../algorithms/pathFinding/dijkstra.js\";\nimport { randomMaze } from \"../algorithms/mazeGen/randomMaze\";\nimport { recursiveDivision, getOrientation } from \"../algorithms/mazeGen/recursiveDivision\";\nimport { AStar } from \"../algorithms/mazeGen/AStar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst gridWidth = 50;\nconst gridHeight = 30;\n\nclass Pathing extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      startSet: false,\n      startNode: null,\n      finishSet: false,\n      finishNode: null,\n      mouseisDown: false\n    };\n    this.handleMazeGen = this.handleMazeGen.bind(this);\n    this.handlePathFinding = this.handlePathFinding.bind(this);\n  }\n\n  componentDidMount() {\n    //build the grid with default parameters \n    const grid = [];\n\n    for (let row = 0; row < gridWidth; row++) {\n      const currentrow = [];\n\n      for (let col = 0; col < gridHeight; col++) {\n        currentrow.push(this.createNode(row, col));\n      }\n\n      grid.push(currentrow);\n    }\n\n    this.setState({\n      grid\n    });\n  }\n\n  createNode(col, row) {\n    return {\n      col,\n      row,\n      distance: Infinity,\n      prevNode: null,\n      isStart: false,\n      isFinish: false,\n      isWall: false,\n      isVisited: false,\n      isVisitedAnimate: false,\n      pathAnimate: false\n    };\n  }\n\n  handleMouseDown(row, col, nodeClass) {\n    if (nodeClass === \"start\") {\n      this.state.grid[col][row].isStart = true;\n      this.setState({\n        startSet: true,\n        startNode: this.state.grid[col][row],\n        grid: this.state.grid\n      });\n    } else if (nodeClass === \"finish\") {\n      this.state.grid[col][row].isFinish = true;\n      this.setState({\n        finishSet: true,\n        finishNode: this.state.grid[col][row],\n        grid: this.state.grid\n      });\n    } else if (nodeClass === \"wall\") {\n      this.state.grid[col][row].isWall = true;\n      this.setState({\n        grid: this.state.grid\n      });\n    }\n\n    this.setState({\n      mouseisDown: true\n    });\n  }\n\n  handleMouseEnter(row, col, nodeClass) {\n    if (nodeClass === \"start\") {\n      this.state.grid[col][row].isStart = true;\n      this.setState({\n        startSet: true,\n        startNode: this.state.grid[col][row],\n        grid: this.state.grid\n      });\n    } else if (nodeClass === \"finish\") {\n      this.state.grid[col][row].isFinish = true;\n      this.setState({\n        finishSet: true,\n        finishNode: this.state.grid[col][row],\n        grid: this.state.grid\n      });\n    } else if (nodeClass === \"wall\") {\n      this.state.grid[col][row].isWall = true;\n      this.setState({\n        grid: this.state.grid\n      });\n    }\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseisDown: false\n    });\n  }\n\n  handlePathFinding(event) {\n    switch (event.target.value) {\n      case 'dijkstra':\n        this.handleDijkstra();\n        break;\n\n      case 'astar':\n        AStar();\n        break;\n    }\n  }\n\n  handleDijkstra() {\n    // prettier-ignore\n    const vistedNodes = dijkstra(this.state.startNode, this.state.finishNode, this.state.grid);\n    const path = getShortestPath(this.state.finishNode);\n\n    for (let i = 0; i < vistedNodes.length; i++) {\n      setTimeout(() => {\n        vistedNodes[i].isVisitedAnimate = true;\n        this.setState({});\n      }, 20 * i);\n\n      if (i === vistedNodes.length - 1) {\n        setTimeout(() => {\n          this.showPath(path);\n        }, 20 * i);\n      }\n    }\n  }\n\n  showPath(path) {\n    for (let i = 0; i < path.length; i++) {\n      setTimeout(() => {\n        path[i].pathAnimate = true;\n        this.setState({});\n      }, 40 * i);\n    }\n  }\n\n  handleMazeGen(event) {\n    switch (event.target.value) {\n      case 'randomMaze':\n        randomMaze(this.state.grid);\n        break;\n\n      case 'recursiveDivision':\n        const orientation = getOrientation(gridHeight, gridWidth);\n        recursiveDivision(this.state.grid, 0, 0, gridHeight, gridWidth, orientation);\n        break;\n    }\n\n    this.setState({});\n  }\n\n  render() {\n    const {\n      grid,\n      startSet,\n      finishSet\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"//\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleDijkstra(),\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        name: \"paths\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          value: this.state.path,\n          onChange: this.handlePathFinding,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"path finding\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"dijkstra\",\n            children: \"dijkstra\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"astar\",\n            children: \"A Star\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        name: \"mazes\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          value: this.state.maze,\n          onChange: this.handleMazeGen,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"maze generation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"randomMaze\",\n            children: \"random maze\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"recursiveDivision\",\n            children: \"recursive division\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nodes\",\n          children: grid.map((row, rowindex) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: row.map((node, nodeindex) => {\n                const {\n                  row,\n                  col,\n                  isStart,\n                  isFinish,\n                  isWall,\n                  isVisited,\n                  isVisitedAnimate,\n                  pathAnimate\n                } = node; // prettier-ignore\n\n                return /*#__PURE__*/_jsxDEV(Node, {\n                  row: row,\n                  col: col,\n                  startSet: startSet,\n                  finishSet: finishSet,\n                  isStart: isStart,\n                  isFinish: isFinish,\n                  isWall: isWall,\n                  isVisited: isVisited,\n                  isVisitedAnimate: isVisitedAnimate,\n                  pathAnimate: pathAnimate,\n                  mouseisDown: this.state.mouseisDown,\n                  onMouseDown: (row, col, nodeClass) => this.handleMouseDown(row, col, nodeClass),\n                  onMouseEnter: (row, col, nodeClass) => this.handleMouseEnter(row, col, nodeClass),\n                  onMouseUp: () => this.handleMouseUp()\n                }, nodeindex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 45\n                }, this);\n              })\n            }, rowindex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Pathing;","map":{"version":3,"sources":["C:/My Projects/pathing-Algorithms/react-app/src/components/pathingApp.jsx"],"names":["React","Component","Node","dijkstra","getShortestPath","randomMaze","recursiveDivision","getOrientation","AStar","gridWidth","gridHeight","Pathing","constructor","props","state","grid","startSet","startNode","finishSet","finishNode","mouseisDown","handleMazeGen","bind","handlePathFinding","componentDidMount","row","currentrow","col","push","createNode","setState","distance","Infinity","prevNode","isStart","isFinish","isWall","isVisited","isVisitedAnimate","pathAnimate","handleMouseDown","nodeClass","handleMouseEnter","handleMouseUp","event","target","value","handleDijkstra","vistedNodes","path","i","length","setTimeout","showPath","orientation","render","maze","map","rowindex","node","nodeindex"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAASC,QAAT,EAAmBC,eAAnB,QAA0C,uCAA1C;AACA,SAASC,UAAT,QAA2B,kCAA3B;AACA,SAASC,iBAAT,EAA4BC,cAA5B,QAAkD,yCAAlD;AACA,SAASC,KAAT,QAAsB,6BAAtB;;AAEA,MAAMC,SAAS,GAAG,EAAlB;AACA,MAAMC,UAAU,GAAG,EAAnB;;AAEA,MAAMC,OAAN,SAAsBV,SAAtB,CAAgC;AAC5BW,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,EADG;AAETC,MAAAA,QAAQ,EAAE,KAFD;AAGTC,MAAAA,SAAS,EAAE,IAHF;AAITC,MAAAA,SAAS,EAAE,KAJF;AAKTC,MAAAA,UAAU,EAAE,IALH;AAMTC,MAAAA,WAAW,EAAE;AANJ,KAAb;AASA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBD,IAAvB,CAA4B,IAA5B,CAAzB;AACH;;AAEDE,EAAAA,iBAAiB,GAAG;AAChB;AACA,UAAMT,IAAI,GAAG,EAAb;;AACA,SAAK,IAAIU,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGhB,SAAxB,EAAmCgB,GAAG,EAAtC,EAA0C;AACtC,YAAMC,UAAU,GAAG,EAAnB;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGjB,UAAxB,EAAoCiB,GAAG,EAAvC,EAA2C;AACvCD,QAAAA,UAAU,CAACE,IAAX,CAAgB,KAAKC,UAAL,CAAgBJ,GAAhB,EAAqBE,GAArB,CAAhB;AACH;;AACDZ,MAAAA,IAAI,CAACa,IAAL,CAAUF,UAAV;AACH;;AACD,SAAKI,QAAL,CAAc;AAAEf,MAAAA;AAAF,KAAd;AACH;;AAEDc,EAAAA,UAAU,CAACF,GAAD,EAAMF,GAAN,EAAW;AACjB,WAAO;AACHE,MAAAA,GADG;AAEHF,MAAAA,GAFG;AAGHM,MAAAA,QAAQ,EAAEC,QAHP;AAIHC,MAAAA,QAAQ,EAAE,IAJP;AAKHC,MAAAA,OAAO,EAAE,KALN;AAMHC,MAAAA,QAAQ,EAAE,KANP;AAOHC,MAAAA,MAAM,EAAE,KAPL;AAQHC,MAAAA,SAAS,EAAE,KARR;AASHC,MAAAA,gBAAgB,EAAE,KATf;AAUHC,MAAAA,WAAW,EAAE;AAVV,KAAP;AAYH;;AAEDC,EAAAA,eAAe,CAACf,GAAD,EAAME,GAAN,EAAWc,SAAX,EAAsB;AACjC,QAAIA,SAAS,KAAK,OAAlB,EAA2B;AACvB,WAAK3B,KAAL,CAAWC,IAAX,CAAgBY,GAAhB,EAAqBF,GAArB,EAA0BS,OAA1B,GAAoC,IAApC;AACA,WAAKJ,QAAL,CAAc;AACVd,QAAAA,QAAQ,EAAE,IADA;AAEVC,QAAAA,SAAS,EAAE,KAAKH,KAAL,CAAWC,IAAX,CAAgBY,GAAhB,EAAqBF,GAArB,CAFD;AAGVV,QAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC;AAHP,OAAd;AAKH,KAPD,MAOO,IAAI0B,SAAS,KAAK,QAAlB,EAA4B;AAC/B,WAAK3B,KAAL,CAAWC,IAAX,CAAgBY,GAAhB,EAAqBF,GAArB,EAA0BU,QAA1B,GAAqC,IAArC;AACA,WAAKL,QAAL,CAAc;AACVZ,QAAAA,SAAS,EAAE,IADD;AAEVC,QAAAA,UAAU,EAAE,KAAKL,KAAL,CAAWC,IAAX,CAAgBY,GAAhB,EAAqBF,GAArB,CAFF;AAGVV,QAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC;AAHP,OAAd;AAKH,KAPM,MAOA,IAAI0B,SAAS,KAAK,MAAlB,EAA0B;AAC7B,WAAK3B,KAAL,CAAWC,IAAX,CAAgBY,GAAhB,EAAqBF,GAArB,EAA0BW,MAA1B,GAAmC,IAAnC;AACA,WAAKN,QAAL,CAAc;AACVf,QAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC;AADP,OAAd;AAGH;;AACD,SAAKe,QAAL,CAAc;AAACV,MAAAA,WAAW,EAAE;AAAd,KAAd;AACH;;AAEDsB,EAAAA,gBAAgB,CAACjB,GAAD,EAAME,GAAN,EAAWc,SAAX,EAAsB;AAClC,QAAIA,SAAS,KAAK,OAAlB,EAA2B;AACvB,WAAK3B,KAAL,CAAWC,IAAX,CAAgBY,GAAhB,EAAqBF,GAArB,EAA0BS,OAA1B,GAAoC,IAApC;AACA,WAAKJ,QAAL,CAAc;AACVd,QAAAA,QAAQ,EAAE,IADA;AAEVC,QAAAA,SAAS,EAAE,KAAKH,KAAL,CAAWC,IAAX,CAAgBY,GAAhB,EAAqBF,GAArB,CAFD;AAGVV,QAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC;AAHP,OAAd;AAKH,KAPD,MAOO,IAAI0B,SAAS,KAAK,QAAlB,EAA4B;AAC/B,WAAK3B,KAAL,CAAWC,IAAX,CAAgBY,GAAhB,EAAqBF,GAArB,EAA0BU,QAA1B,GAAqC,IAArC;AACA,WAAKL,QAAL,CAAc;AACVZ,QAAAA,SAAS,EAAE,IADD;AAEVC,QAAAA,UAAU,EAAE,KAAKL,KAAL,CAAWC,IAAX,CAAgBY,GAAhB,EAAqBF,GAArB,CAFF;AAGVV,QAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC;AAHP,OAAd;AAKH,KAPM,MAOA,IAAI0B,SAAS,KAAK,MAAlB,EAA0B;AAC7B,WAAK3B,KAAL,CAAWC,IAAX,CAAgBY,GAAhB,EAAqBF,GAArB,EAA0BW,MAA1B,GAAmC,IAAnC;AACA,WAAKN,QAAL,CAAc;AACVf,QAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC;AADP,OAAd;AAGH;AACJ;;AAED4B,EAAAA,aAAa,GAAE;AACX,SAAKb,QAAL,CAAc;AAACV,MAAAA,WAAW,EAAE;AAAd,KAAd;AACH;;AAEDG,EAAAA,iBAAiB,CAACqB,KAAD,EAAO;AACpB,YAAOA,KAAK,CAACC,MAAN,CAAaC,KAApB;AACI,WAAK,UAAL;AACI,aAAKC,cAAL;AACJ;;AAEA,WAAK,OAAL;AACIvC,QAAAA,KAAK;AACT;AAPJ;AASH;;AAEDuC,EAAAA,cAAc,GAAG;AACb;AACA,UAAMC,WAAW,GAAG7C,QAAQ,CAAC,KAAKW,KAAL,CAAWG,SAAZ,EAAuB,KAAKH,KAAL,CAAWK,UAAlC,EAA8C,KAAKL,KAAL,CAAWC,IAAzD,CAA5B;AACA,UAAMkC,IAAI,GAAG7C,eAAe,CAAC,KAAKU,KAAL,CAAWK,UAAZ,CAA5B;;AAEA,SAAK,IAAI+B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACG,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzCE,MAAAA,UAAU,CAAC,MAAM;AACbJ,QAAAA,WAAW,CAACE,CAAD,CAAX,CAAeZ,gBAAf,GAAkC,IAAlC;AACA,aAAKR,QAAL,CAAc,EAAd;AACH,OAHS,EAGP,KAAKoB,CAHE,CAAV;;AAKA,UAAIA,CAAC,KAAKF,WAAW,CAACG,MAAZ,GAAqB,CAA/B,EAAkC;AAC9BC,QAAAA,UAAU,CAAC,MAAM;AACb,eAAKC,QAAL,CAAcJ,IAAd;AACH,SAFS,EAEP,KAAKC,CAFE,CAAV;AAGH;AACJ;AACJ;;AAEDG,EAAAA,QAAQ,CAACJ,IAAD,EAAO;AACX,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClCE,MAAAA,UAAU,CAAC,MAAM;AACbH,QAAAA,IAAI,CAACC,CAAD,CAAJ,CAAQX,WAAR,GAAsB,IAAtB;AACA,aAAKT,QAAL,CAAc,EAAd;AACH,OAHS,EAGP,KAAKoB,CAHE,CAAV;AAIH;AACJ;;AAED7B,EAAAA,aAAa,CAACuB,KAAD,EAAO;AAChB,YAAOA,KAAK,CAACC,MAAN,CAAaC,KAApB;AACI,WAAK,YAAL;AACIzC,QAAAA,UAAU,CAAC,KAAKS,KAAL,CAAWC,IAAZ,CAAV;AACJ;;AAEA,WAAK,mBAAL;AACI,cAAMuC,WAAW,GAAG/C,cAAc,CAAEG,UAAF,EAAcD,SAAd,CAAlC;AACAH,QAAAA,iBAAiB,CAAC,KAAKQ,KAAL,CAAWC,IAAZ,EAAkB,CAAlB,EAAqB,CAArB,EAAwBL,UAAxB,EAAoCD,SAApC,EAA+C6C,WAA/C,CAAjB;AACJ;AARJ;;AAUA,SAAKxB,QAAL,CAAc,EAAd;AACH;;AAIDyB,EAAAA,MAAM,GAAG;AACL,UAAM;AAAExC,MAAAA,IAAF;AAAQC,MAAAA,QAAR;AAAkBE,MAAAA;AAAlB,QAAgC,KAAKJ,KAA3C;AAGA,wBAEI;AAAA,oCACM;AAAQ,QAAA,OAAO,EAAE,MAAM,KAAKiC,cAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADN,eAEI;AAAM,QAAA,IAAI,EAAC,OAAX;AAAA,+BACI;AAAQ,UAAA,KAAK,EAAE,KAAKjC,KAAL,CAAWmC,IAA1B;AAAgC,UAAA,QAAQ,EAAE,KAAK1B,iBAA/C;AAAA,kCACI;AAAQ,YAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAQ,YAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAQ,YAAA,KAAK,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ,eASI;AAAM,QAAA,IAAI,EAAC,OAAX;AAAA,+BACI;AAAQ,UAAA,KAAK,EAAE,KAAKT,KAAL,CAAW0C,IAA1B;AAAgC,UAAA,QAAQ,EAAE,KAAKnC,aAA/C;AAAA,kCACI;AAAQ,YAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAQ,YAAA,KAAK,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAQ,YAAA,KAAK,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cATJ,eAgBI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,OAAf;AAAA,oBACKN,IAAI,CAAC0C,GAAL,CAAS,CAAChC,GAAD,EAAMiC,QAAN,KAAmB;AACzB,gCACI;AAAA,wBACKjC,GAAG,CAACgC,GAAJ,CAAQ,CAACE,IAAD,EAAOC,SAAP,KAAqB;AAC1B,sBAAM;AACFnC,kBAAAA,GADE;AAEFE,kBAAAA,GAFE;AAGFO,kBAAAA,OAHE;AAIFC,kBAAAA,QAJE;AAKFC,kBAAAA,MALE;AAMFC,kBAAAA,SANE;AAOFC,kBAAAA,gBAPE;AAQFC,kBAAAA;AARE,oBASFoB,IATJ,CAD0B,CAW1B;;AACA,oCACI,QAAC,IAAD;AAEI,kBAAA,GAAG,EAAElC,GAFT;AAGI,kBAAA,GAAG,EAAEE,GAHT;AAII,kBAAA,QAAQ,EAAEX,QAJd;AAKI,kBAAA,SAAS,EAAEE,SALf;AAMI,kBAAA,OAAO,EAAEgB,OANb;AAOI,kBAAA,QAAQ,EAAEC,QAPd;AAQI,kBAAA,MAAM,EAAEC,MARZ;AASI,kBAAA,SAAS,EAAEC,SATf;AAUI,kBAAA,gBAAgB,EAAEC,gBAVtB;AAWI,kBAAA,WAAW,EAAEC,WAXjB;AAYI,kBAAA,WAAW,EAAE,KAAKzB,KAAL,CAAWM,WAZ5B;AAaI,kBAAA,WAAW,EAAE,CAACK,GAAD,EAAKE,GAAL,EAASc,SAAT,KAAuB,KAAKD,eAAL,CAAqBf,GAArB,EAA0BE,GAA1B,EAA+Bc,SAA/B,CAbxC;AAcI,kBAAA,YAAY,EAAE,CAAChB,GAAD,EAAKE,GAAL,EAASc,SAAT,KAAuB,KAAKC,gBAAL,CAAsBjB,GAAtB,EAA2BE,GAA3B,EAAgCc,SAAhC,CAdzC;AAeI,kBAAA,SAAS,EAAE,MAAM,KAAKE,aAAL;AAfrB,mBACSiB,SADT;AAAA;AAAA;AAAA;AAAA,wBADJ;AAmBH,eA/BA;AADL,eAAUF,QAAV;AAAA;AAAA;AAAA;AAAA,oBADJ;AAoCH,WArCA;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AA8DH;;AAzN2B;;AA4NhC,eAAe/C,OAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport Node from \"./node/node\";\r\nimport { dijkstra, getShortestPath } from \"../algorithms/pathFinding/dijkstra.js\";\r\nimport { randomMaze } from \"../algorithms/mazeGen/randomMaze\";\r\nimport { recursiveDivision, getOrientation } from \"../algorithms/mazeGen/recursiveDivision\";\r\nimport { AStar } from \"../algorithms/mazeGen/AStar\";\r\n\r\nconst gridWidth = 50;\r\nconst gridHeight = 30;\r\n\r\nclass Pathing extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            startSet: false,\r\n            startNode: null,\r\n            finishSet: false,\r\n            finishNode: null,\r\n            mouseisDown: false\r\n        };\r\n        \r\n        this.handleMazeGen = this.handleMazeGen.bind(this);\r\n        this.handlePathFinding = this.handlePathFinding.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        //build the grid with default parameters \r\n        const grid = [];\r\n        for (let row = 0; row < gridWidth; row++) {\r\n            const currentrow = [];\r\n            for (let col = 0; col < gridHeight; col++) {\r\n                currentrow.push(this.createNode(row, col));\r\n            }\r\n            grid.push(currentrow);\r\n        }\r\n        this.setState({ grid });\r\n    }\r\n\r\n    createNode(col, row) {\r\n        return {\r\n            col,\r\n            row,\r\n            distance: Infinity,\r\n            prevNode: null,\r\n            isStart: false,\r\n            isFinish: false,\r\n            isWall: false,\r\n            isVisited: false,\r\n            isVisitedAnimate: false,\r\n            pathAnimate: false,\r\n        };\r\n    }\r\n\r\n    handleMouseDown(row, col, nodeClass) {\r\n        if (nodeClass === \"start\") {\r\n            this.state.grid[col][row].isStart = true;\r\n            this.setState({\r\n                startSet: true,\r\n                startNode: this.state.grid[col][row],\r\n                grid: this.state.grid,\r\n            });\r\n        } else if (nodeClass === \"finish\") {\r\n            this.state.grid[col][row].isFinish = true;\r\n            this.setState({\r\n                finishSet: true,\r\n                finishNode: this.state.grid[col][row],\r\n                grid: this.state.grid,\r\n            });\r\n        } else if (nodeClass === \"wall\") {\r\n            this.state.grid[col][row].isWall = true;\r\n            this.setState({\r\n                grid: this.state.grid,\r\n            });\r\n        }\r\n        this.setState({mouseisDown: true});\r\n    }\r\n\r\n    handleMouseEnter(row, col, nodeClass) {\r\n        if (nodeClass === \"start\") {\r\n            this.state.grid[col][row].isStart = true;\r\n            this.setState({\r\n                startSet: true,\r\n                startNode: this.state.grid[col][row],\r\n                grid: this.state.grid,\r\n            });\r\n        } else if (nodeClass === \"finish\") {\r\n            this.state.grid[col][row].isFinish = true;\r\n            this.setState({\r\n                finishSet: true,\r\n                finishNode: this.state.grid[col][row],\r\n                grid: this.state.grid,\r\n            });\r\n        } else if (nodeClass === \"wall\") {\r\n            this.state.grid[col][row].isWall = true;\r\n            this.setState({\r\n                grid: this.state.grid,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleMouseUp(){\r\n        this.setState({mouseisDown: false});\r\n    }\r\n\r\n    handlePathFinding(event){\r\n        switch(event.target.value){\r\n            case 'dijkstra':\r\n                this.handleDijkstra();\r\n            break;\r\n\r\n            case 'astar':\r\n                AStar();\r\n            break;\r\n        }\r\n    }\r\n\r\n    handleDijkstra() {\r\n        // prettier-ignore\r\n        const vistedNodes = dijkstra(this.state.startNode, this.state.finishNode, this.state.grid);\r\n        const path = getShortestPath(this.state.finishNode);\r\n\r\n        for (let i = 0; i < vistedNodes.length; i++) {\r\n            setTimeout(() => {\r\n                vistedNodes[i].isVisitedAnimate = true;\r\n                this.setState({});\r\n            }, 20 * i);\r\n\r\n            if (i === vistedNodes.length - 1) {\r\n                setTimeout(() => {\r\n                    this.showPath(path);\r\n                }, 20 * i);\r\n            }\r\n        }\r\n    }\r\n\r\n    showPath(path) {\r\n        for (let i = 0; i < path.length; i++) {\r\n            setTimeout(() => {\r\n                path[i].pathAnimate = true;\r\n                this.setState({});\r\n            }, 40 * i);\r\n        }\r\n    }\r\n\r\n    handleMazeGen(event){\r\n        switch(event.target.value){\r\n            case 'randomMaze':\r\n                randomMaze(this.state.grid);\r\n            break;\r\n\r\n            case 'recursiveDivision':\r\n                const orientation = getOrientation( gridHeight, gridWidth,);\r\n                recursiveDivision(this.state.grid, 0, 0, gridHeight, gridWidth, orientation);  \r\n            break;\r\n        }\r\n        this.setState({});\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { grid, startSet, finishSet } = this.state;\r\n        \r\n        \r\n        return (\r\n           \r\n            <div>\r\n                //<button onClick={() => this.handleDijkstra()}>Start</button>\r\n                <form name=\"paths\">\r\n                    <select value={this.state.path} onChange={this.handlePathFinding}>\r\n                        <option value=\"\">path finding</option>\r\n                        <option value=\"dijkstra\">dijkstra</option>\r\n                        <option value=\"astar\">A Star</option>\r\n                    </select>\r\n                </form>\r\n                <form name=\"mazes\">\r\n                    <select value={this.state.maze} onChange={this.handleMazeGen}>\r\n                        <option value=\"\">maze generation</option>\r\n                        <option value=\"randomMaze\">random maze</option>\r\n                        <option value=\"recursiveDivision\">recursive division</option>\r\n                    </select>\r\n                </form>\r\n                <div className=\"grid\">\r\n                    <div className=\"nodes\">\r\n                        {grid.map((row, rowindex) => {\r\n                            return (\r\n                                <div key={rowindex}>\r\n                                    {row.map((node, nodeindex) => {\r\n                                        const {\r\n                                            row,\r\n                                            col,\r\n                                            isStart,\r\n                                            isFinish,\r\n                                            isWall,\r\n                                            isVisited,\r\n                                            isVisitedAnimate,\r\n                                            pathAnimate,\r\n                                        } = node;\r\n                                        // prettier-ignore\r\n                                        return (\r\n                                            <Node\r\n                                                key={nodeindex}\r\n                                                row={row}\r\n                                                col={col}\r\n                                                startSet={startSet}\r\n                                                finishSet={finishSet}\r\n                                                isStart={isStart}\r\n                                                isFinish={isFinish}\r\n                                                isWall={isWall}\r\n                                                isVisited={isVisited}\r\n                                                isVisitedAnimate={isVisitedAnimate}\r\n                                                pathAnimate={pathAnimate}\r\n                                                mouseisDown={this.state.mouseisDown}\r\n                                                onMouseDown={(row,col,nodeClass) => this.handleMouseDown(row, col, nodeClass)}\r\n                                                onMouseEnter={(row,col,nodeClass) => this.handleMouseEnter(row, col, nodeClass)}\r\n                                                onMouseUp={() => this.handleMouseUp()}\r\n                                            ></Node>\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pathing;\r\n"]},"metadata":{},"sourceType":"module"}