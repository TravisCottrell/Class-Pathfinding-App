{"ast":null,"code":"export function dfs(grid) {\n  const startNode = grid[1][0];\n  const visited = [];\n  const stack = [];\n  stack.push(startNode); //console.log(visited);\n\n  let i = 0;\n\n  while (i < 10) {\n    const currentNode = stack.pop();\n    visited.push(currentNode);\n    const neighbors = getNeighbors(currentNode, grid, visited);\n\n    for (neighbor of neighbors) {\n      math;\n    }\n\n    currentNode.isWall = true;\n    i += 1;\n  }\n}\n\nfunction getNeighbors(node, grid, visited) {\n  // prettier-ignore\n  const neighbors = [];\n  console.log(node);\n\n  for (const i of [[0, -1], [0, 1], [-1, 0], [1, 0]]) {\n    const temp = [node.row + i[0], node.col + i[1]]; // check if the neighbor node is within the grid bounds\n\n    if (temp[0] < 0 || temp[0] > 29 || temp[1] < 0 || temp[1] > 49) {\n      continue;\n    }\n\n    ;\n    const neighbor = grid[temp[1]][temp[0]];\n\n    if (!visited.includes(neighbor)) {\n      neighbors.push(neighbor);\n    }\n  }\n\n  return neighbors;\n}","map":{"version":3,"sources":["C:/My Projects/pathing-Algorithms/react-app/src/algorithms/mazeGen/depthFirst.js"],"names":["dfs","grid","startNode","visited","stack","push","i","currentNode","pop","neighbors","getNeighbors","neighbor","math","isWall","node","console","log","temp","row","col","includes"],"mappings":"AAEA,OAAO,SAASA,GAAT,CAAaC,IAAb,EAAkB;AACrB,QAAMC,SAAS,GAAGD,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAAlB;AACA,QAAME,OAAO,GAAG,EAAhB;AACA,QAAMC,KAAK,GAAG,EAAd;AACAA,EAAAA,KAAK,CAACC,IAAN,CAAWH,SAAX,EAJqB,CAKrB;;AAEA,MAAII,CAAC,GAAG,CAAR;;AACA,SAAMA,CAAC,GAAG,EAAV,EAAa;AACT,UAAMC,WAAW,GAAGH,KAAK,CAACI,GAAN,EAApB;AACAL,IAAAA,OAAO,CAACE,IAAR,CAAaE,WAAb;AACA,UAAME,SAAS,GAAGC,YAAY,CAACH,WAAD,EAAcN,IAAd,EAAoBE,OAApB,CAA9B;;AACA,SAAKQ,QAAL,IAAiBF,SAAjB,EAA2B;AACvBG,MAAAA,IAAI;AACP;;AACDL,IAAAA,WAAW,CAACM,MAAZ,GAAqB,IAArB;AACAP,IAAAA,CAAC,IAAE,CAAH;AACH;AAEJ;;AAED,SAASI,YAAT,CAAsBI,IAAtB,EAA4Bb,IAA5B,EAAkCE,OAAlC,EAA2C;AACvC;AACA,QAAMM,SAAS,GAAG,EAAlB;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AACA,OAAK,MAAMR,CAAX,IAAgB,CAAC,CAAC,CAAD,EAAI,CAAC,CAAL,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAgB,CAAC,CAAC,CAAF,EAAK,CAAL,CAAhB,EAAwB,CAAC,CAAD,EAAI,CAAJ,CAAxB,CAAhB,EAAiD;AAC7C,UAAMW,IAAI,GAAG,CAACH,IAAI,CAACI,GAAL,GAAWZ,CAAC,CAAC,CAAD,CAAb,EAAkBQ,IAAI,CAACK,GAAL,GAAWb,CAAC,CAAC,CAAD,CAA9B,CAAb,CAD6C,CAE7C;;AAEA,QAAGW,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV,IAAeA,IAAI,CAAC,CAAD,CAAJ,GAAU,EAAzB,IAA+BA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAzC,IAA8CA,IAAI,CAAC,CAAD,CAAJ,GAAU,EAA3D,EAA8D;AAAC;AAAS;;AAAA;AAExE,UAAMN,QAAQ,GAAGV,IAAI,CAACgB,IAAI,CAAC,CAAD,CAAL,CAAJ,CAAcA,IAAI,CAAC,CAAD,CAAlB,CAAjB;;AAEA,QAAG,CAACd,OAAO,CAACiB,QAAR,CAAiBT,QAAjB,CAAJ,EAAgC;AAC5BF,MAAAA,SAAS,CAACJ,IAAV,CAAeM,QAAf;AACH;AACJ;;AACD,SAAOF,SAAP;AACH","sourcesContent":["\r\n\r\nexport function dfs(grid){\r\n    const startNode = grid[1][0];\r\n    const visited = [];\r\n    const stack = [];\r\n    stack.push(startNode);\r\n    //console.log(visited);\r\n\r\n    let i = 0;\r\n    while(i < 10){\r\n        const currentNode = stack.pop();\r\n        visited.push(currentNode);\r\n        const neighbors = getNeighbors(currentNode, grid, visited);\r\n        for (neighbor of neighbors){\r\n            math\r\n        }\r\n        currentNode.isWall = true;\r\n        i+=1;\r\n    }\r\n\r\n}\r\n\r\nfunction getNeighbors(node, grid, visited) {\r\n    // prettier-ignore\r\n    const neighbors = [];\r\n    console.log(node);\r\n    for (const i of [[0, -1],[0, 1],[-1, 0],[1, 0]]) {\r\n        const temp = [node.row + i[0], node.col + i[1]];\r\n        // check if the neighbor node is within the grid bounds\r\n        \r\n        if(temp[0] < 0 || temp[0] > 29 || temp[1] < 0 || temp[1] > 49){continue};\r\n        \r\n        const neighbor = grid[temp[1]][temp[0]];\r\n        \r\n        if(!visited.includes(neighbor)) {\r\n            neighbors.push(neighbor);\r\n        }\r\n    }\r\n    return neighbors;\r\n}"]},"metadata":{},"sourceType":"module"}