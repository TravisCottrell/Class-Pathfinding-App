{"ast":null,"code":"export function recursiveDivision(grid, row, col, height, width, orientation) {\n  if (width < 3 || height < 3) return;\n  let isHorizontal = orientation;\n  let newHeight1 = height;\n  let newHeight2 = height;\n  let newWidth1 = width;\n  let newWidth2 = width;\n  let col2 = col;\n  let row2 = row;\n  let wallcol = col;\n  let wallrow = row;\n  let passageCol;\n  let passageRow;\n\n  if (isHorizontal) {\n    wallrow = row + getRandNum(row, height - 2);\n    newHeight1 = wallrow - row;\n    newHeight2 = row + height - wallrow;\n\n    for (let i = col; i < col + width; i++) {\n      grid[i][wallrow].isWall = true;\n    }\n\n    row2 = wallrow;\n    col2 = wallcol;\n    passageCol = wallcol + (isHorizontal ? getRandNum(col, width - 1) : 0);\n    passageRow = wallrow + (isHorizontal ? 0 : getRandNum(row, height - 1));\n  } else {\n    wallcol = col + getRandNum(col, width - 2);\n    newWidth1 = wallcol - col;\n    newWidth2 = row + width - wallcol;\n\n    for (let i = row; i < row + height; i++) {\n      grid[wallcol][i].isWall = true;\n    }\n\n    row2 = wallrow;\n    col2 = wallcol;\n    let passageCol = wallcol + (isHorizontal ? getRandNum(col2, width - 1) : 0);\n    let passageRow = wallrow + (isHorizontal ? 0 : getRandNum(row2, height - 1));\n  }\n\n  grid[passageCol][passageRow].isWall = false;\n  console.log(\"wall (r,c): \", wallrow, wallcol);\n  console.log(\"pass (r,c): \", passageRow, passageCol);\n  console.log('node: ', grid[passageCol][passageRow]);\n  console.log(\"---------------------\");\n  recursiveDivision(grid, row, col, newHeight1, newWidth1, getOrientation(newHeight1, newWidth1));\n  recursiveDivision(grid, row2, col2, newHeight2, newWidth2, getOrientation(newHeight2, newWidth2));\n}\nexport function getOrientation(height, width) {\n  if (width < height) {\n    //is horizontal\n    return true;\n  } else if (height < width) {\n    // is vertical\n    return false;\n  } else {\n    const rand = Math.floor(Math.random() * 2);\n    return rand === 0 ? true : false;\n  }\n}\n\nfunction getRandNum(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}","map":{"version":3,"sources":["C:/My Projects/pathing-Algorithms/react-app/src/algorithms/mazeGen/recursiveDivision.js"],"names":["recursiveDivision","grid","row","col","height","width","orientation","isHorizontal","newHeight1","newHeight2","newWidth1","newWidth2","col2","row2","wallcol","wallrow","passageCol","passageRow","getRandNum","i","isWall","console","log","getOrientation","rand","Math","floor","random","min","max"],"mappings":"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","sourcesContent":["export function recursiveDivision(grid,row, col, height, width, orientation){\r\n    if(width < 3 || height < 3)return;\r\n\r\n    let isHorizontal = orientation;\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n    let newHeight1 = height;\r\n    let newHeight2 = height;\r\n    let newWidth1 = width;\r\n    let newWidth2= width;\r\n    let col2 = col;\r\n    let row2 = row;\r\n    let wallcol = col;\r\n    let wallrow = row;\r\n    let passageCol;\r\n    let passageRow;\r\n    \r\n    if(isHorizontal){\r\n        wallrow = row + getRandNum(row, (height - 2));\r\n        newHeight1 = wallrow - row;\r\n        newHeight2 = row + height - wallrow;\r\n        \r\n\r\n        for(let i = col; i < col+width; i++){\r\n            grid[i][wallrow].isWall = true;\r\n        }\r\n\r\n        row2 = wallrow;\r\n        col2 = wallcol;\r\n        passageCol = wallcol + (isHorizontal ? getRandNum(col, (width - 1)) : 0);\r\n        passageRow = wallrow + (isHorizontal ? 0 : getRandNum(row, (height - 1)));\r\n    }else{\r\n        wallcol = col + getRandNum(col, (width - 2));\r\n        newWidth1 = wallcol - col;\r\n        newWidth2 = row + width - wallcol;\r\n       \r\n\r\n        for(let i = row; i < row + height; i++){\r\n            grid[wallcol][i].isWall = true; \r\n        }\r\n\r\n        row2 = wallrow;\r\n        col2 = wallcol;\r\n        let passageCol = wallcol + (isHorizontal ? getRandNum(col2, (width - 1)) : 0);\r\n        let passageRow = wallrow + (isHorizontal ? 0 : getRandNum(row2, (height - 1)));\r\n    }\r\n\r\n    grid[passageCol][passageRow].isWall = false;\r\n\r\n    console.log(\"wall (r,c): \", wallrow, wallcol);\r\n    console.log(\"pass (r,c): \", passageRow, passageCol);\r\n    console.log('node: ',grid[passageCol][passageRow]);\r\n    console.log(\"---------------------\");\r\n\r\n\r\n\r\n    recursiveDivision(grid, row, col, newHeight1, newWidth1, getOrientation(newHeight1, newWidth1));\r\n    recursiveDivision(grid, row2, col2, newHeight2, newWidth2, getOrientation(newHeight2, newWidth2));\r\n    \r\n}\r\n\r\nexport function getOrientation(height, width){\r\n    if(width < height){//is horizontal\r\n        return true;\r\n    }else if(height < width){ // is vertical\r\n        return false;\r\n    }else{\r\n        const rand = Math.floor(Math.random() * 2);\r\n        return rand === 0  ? true : false;\r\n    }\r\n}\r\n\r\nfunction getRandNum(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) ) + min;\r\n  }\r\n\r\n"]},"metadata":{},"sourceType":"module"}