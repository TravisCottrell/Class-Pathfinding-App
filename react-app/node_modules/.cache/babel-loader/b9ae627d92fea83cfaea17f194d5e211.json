{"ast":null,"code":"export function recursiveDivision(grid, rowStart, colStart, rowEnd, colEnd, orientation) {\n  if (rowEnd < rowStart || rowStart < 2) return;\n  let isHorizontal = orientation; //get the column or row that a wall will be drawn in\n\n  const wallrow = row + (isHorizontal ? 0 : Math.floor(Math.random() * width - 2));\n  const wallcol = col + (isHorizontal ? Math.floor(Math.random() * height - 2) : 0);\n  console.log(\"wallrow\", wallrow);\n  console.log(\"wallcol\", wallcol); //random node in the wall will be selected as a passage\n\n  const passageRow = wallrow + (isHorizontal ? Math.floor(Math.random() * width) : 0);\n  const passageCol = wallcol + (isHorizontal ? 0 : Math.floor(Math.random() * height));\n  console.log(\"passrow\", passageRow);\n  console.log(\"passcol\", passageCol); //draw the wall\n\n  if (isHorizontal) {\n    for (let i = 0; i < width - 1; i++) {\n      grid[i][wallcol].isWall = true;\n    }\n  } else {\n    for (let i = 0; i < height - 1; i++) {\n      grid[wallrow][i].isWall = true;\n    }\n  }\n\n  grid[passageRow][passageCol].isWall = false;\n  let newHeight1 = height;\n  let newHeight2 = height;\n  let newWidth1 = width;\n  let newWidth2 = width;\n\n  if (isHorizontal) {\n    newHeight1 = wallcol + 1;\n    newHeight2 = row + height;\n  } else {\n    newWidth1 = width - row + 1;\n    newWidth2 = col + width;\n  }\n\n  recursiveDivision(grid, row, col, newHeight1, newWidth1, getOrientation(newHeight1, newWidth1));\n  recursiveDivision(grid, row, col, newHeight2, newWidth2, getOrientation(newHeight2, newWidth2));\n}\nexport function getOrientation(height, width) {\n  if (width < height) {\n    //is horizontal\n    return true;\n  } else if (height < width) {\n    // is vertical\n    return false;\n  } else {\n    const rand = Math.floor(Math.random() * 2);\n    return rand === 0 ? true : false;\n  }\n}","map":{"version":3,"sources":["C:/My Projects/pathing-Algorithms/react-app/src/algorithms/mazeGen/recursiveDivision.js"],"names":["recursiveDivision","grid","rowStart","colStart","rowEnd","colEnd","orientation","isHorizontal","wallrow","row","Math","floor","random","width","wallcol","col","height","console","log","passageRow","passageCol","i","isWall","newHeight1","newHeight2","newWidth1","newWidth2","getOrientation","rand"],"mappings":"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","sourcesContent":["export function recursiveDivision(grid,rowStart, colStart, rowEnd, colEnd, orientation){\r\n    if(rowEnd < rowStart || rowStart < 2)return;\r\n\r\n    let isHorizontal = orientation;\r\n\r\n    //get the column or row that a wall will be drawn in\r\n    const wallrow = row + (isHorizontal ? 0 : Math.floor(Math.random() * width - 2));\r\n    const wallcol = col + (isHorizontal ? Math.floor(Math.random() * height - 2) : 0);\r\n    console.log(\"wallrow\", wallrow);\r\n    console.log(\"wallcol\", wallcol);\r\n\r\n    //random node in the wall will be selected as a passage\r\n    const passageRow = wallrow + (isHorizontal ? Math.floor(Math.random() * width) : 0);\r\n    const passageCol = wallcol + (isHorizontal ? 0 : Math.floor(Math.random() * height));\r\n    console.log(\"passrow\", passageRow);\r\n    console.log(\"passcol\", passageCol);\r\n\r\n    //draw the wall\r\n    if(isHorizontal){\r\n        for(let i = 0; i < width-1; i++){\r\n            grid[i][wallcol].isWall = true;\r\n        }  \r\n    }else{\r\n        for(let i = 0; i < height-1; i++){\r\n            grid[wallrow][i].isWall = true;\r\n        }\r\n    }\r\n    grid[passageRow][passageCol].isWall = false;\r\n\r\n\r\n    let newHeight1 = height;\r\n    let newHeight2 = height;\r\n    let newWidth1 = width;\r\n    let newWidth2= width;\r\n\r\n    if(isHorizontal){\r\n        newHeight1 =  wallcol + 1;\r\n        newHeight2 = row + height ;\r\n    }else{\r\n        newWidth1 = width - row + 1;\r\n        newWidth2 = col + width ;\r\n    }\r\n    recursiveDivision(grid,row, col, newHeight1, newWidth1, getOrientation( newHeight1, newWidth1));\r\n    recursiveDivision(grid,row, col, newHeight2, newWidth2, getOrientation(newHeight2, newWidth2));\r\n    \r\n}\r\n\r\nexport function getOrientation(height, width){\r\n    if(width < height){//is horizontal\r\n        return true;\r\n    }else if(height < width){ // is vertical\r\n        return false;\r\n    }else{\r\n        const rand = Math.floor(Math.random() * 2);\r\n        return rand === 0  ? true : false;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}