{"ast":null,"code":"export function recursiveDivision(grid, row, col, height, width, orientation) {\n  if (width < 3 || height < 3) return;\n  let isHorizontal = orientation;\n  let wallcol = 0;\n  let wallrow = 0;\n  let newHeight1 = height;\n  let newHeight2 = height;\n  let newWidth1 = width;\n  let newWidth2 = width;\n\n  if (isHorizontal) {\n    wallrow = row + getRandNum(col, height - 2);\n    newHeight1 = wallrow - col;\n    newHeight2 = col + height - wallrow;\n\n    for (let i = 0; i < width; i++) {\n      grid[i][wallrow].isWall = true;\n    }\n  } else {\n    wallcol = col + getRandNum(row, width - 2);\n    newWidth1 = wallcol - row;\n    newWidth2 = row + width - wallcol;\n\n    for (let i = 0; i < height; i++) {\n      grid[wallcol][i].isWall = true;\n    }\n  }\n\n  const passageCol = wallcol + (isHorizontal ? getRandNum(row, width - 1) : 0);\n  const passageRow = wallrow + (isHorizontal ? 0 : getRandNum(col, height - 1));\n  grid[passageCol][passageRow].isWall = false;\n  console.log(\"wall (r,c): \", wallrow, wallcol);\n  console.log(\"pass (r,c): \", passageRow, passageCol);\n  console.log('node: ', grid[passageCol][passageRow]);\n  console.log(\"---------------------\");\n  recursiveDivision(grid, row, col, newHeight1, newWidth1, getOrientation(newHeight1, newWidth1)); //recursiveDivision(grid, wallrow, wallcol, newHeight2, newWidth2, getOrientation(newHeight2, newWidth2));\n}\nexport function getOrientation(height, width) {\n  if (width < height) {\n    //is horizontal\n    return true;\n  } else if (height < width) {\n    // is vertical\n    return false;\n  } else {\n    const rand = Math.floor(Math.random() * 2);\n    return rand === 0 ? true : false;\n  }\n}\n\nfunction getRandNum(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}","map":{"version":3,"sources":["C:/My Projects/pathing-Algorithms/react-app/src/algorithms/mazeGen/recursiveDivision.js"],"names":["recursiveDivision","grid","row","col","height","width","orientation","isHorizontal","wallcol","wallrow","newHeight1","newHeight2","newWidth1","newWidth2","getRandNum","i","isWall","passageCol","passageRow","console","log","getOrientation","rand","Math","floor","random","min","max"],"mappings":"AAAA,OAAO,SAASA,iBAAT,CAA2BC,IAA3B,EAAgCC,GAAhC,EAAqCC,GAArC,EAA0CC,MAA1C,EAAkDC,KAAlD,EAAyDC,WAAzD,EAAqE;AACxE,MAAGD,KAAK,GAAG,CAAR,IAAaD,MAAM,GAAG,CAAzB,EAA2B;AAE3B,MAAIG,YAAY,GAAGD,WAAnB;AAKA,MAAIE,OAAO,GAAG,CAAd;AACA,MAAIC,OAAO,GAAG,CAAd;AAGA,MAAIC,UAAU,GAAGN,MAAjB;AACA,MAAIO,UAAU,GAAGP,MAAjB;AACA,MAAIQ,SAAS,GAAGP,KAAhB;AACA,MAAIQ,SAAS,GAAER,KAAf;;AAEA,MAAGE,YAAH,EAAgB;AACZE,IAAAA,OAAO,GAAGP,GAAG,GAAGY,UAAU,CAACX,GAAD,EAAOC,MAAM,GAAG,CAAhB,CAA1B;AACAM,IAAAA,UAAU,GAAGD,OAAO,GAAGN,GAAvB;AACAQ,IAAAA,UAAU,GAAGR,GAAG,GAAGC,MAAN,GAAeK,OAA5B;;AAEA,SAAI,IAAIM,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGV,KAAnB,EAA0BU,CAAC,EAA3B,EAA8B;AAC1Bd,MAAAA,IAAI,CAACc,CAAD,CAAJ,CAAQN,OAAR,EAAiBO,MAAjB,GAA0B,IAA1B;AACH;AACJ,GARD,MAQK;AACDR,IAAAA,OAAO,GAAGL,GAAG,GAAGW,UAAU,CAACZ,GAAD,EAAOG,KAAK,GAAG,CAAf,CAA1B;AACAO,IAAAA,SAAS,GAAGJ,OAAO,GAAGN,GAAtB;AACAW,IAAAA,SAAS,GAAGX,GAAG,GAAGG,KAAN,GAAcG,OAA1B;;AAEA,SAAI,IAAIO,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGX,MAAnB,EAA2BW,CAAC,EAA5B,EAA+B;AAC3Bd,MAAAA,IAAI,CAACO,OAAD,CAAJ,CAAcO,CAAd,EAAiBC,MAAjB,GAA0B,IAA1B;AACH;AACJ;;AACD,QAAMC,UAAU,GAAGT,OAAO,IAAID,YAAY,GAAGO,UAAU,CAACZ,GAAD,EAAOG,KAAK,GAAG,CAAf,CAAb,GAAkC,CAAlD,CAA1B;AACA,QAAMa,UAAU,GAAGT,OAAO,IAAIF,YAAY,GAAG,CAAH,GAAOO,UAAU,CAACX,GAAD,EAAOC,MAAM,GAAG,CAAhB,CAAjC,CAA1B;AACAH,EAAAA,IAAI,CAACgB,UAAD,CAAJ,CAAiBC,UAAjB,EAA6BF,MAA7B,GAAsC,KAAtC;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BX,OAA5B,EAAqCD,OAArC;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,UAA5B,EAAwCD,UAAxC;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBnB,IAAI,CAACgB,UAAD,CAAJ,CAAiBC,UAAjB,CAArB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AAIApB,EAAAA,iBAAiB,CAACC,IAAD,EAAOC,GAAP,EAAYC,GAAZ,EAAiBO,UAAjB,EAA6BE,SAA7B,EAAwCS,cAAc,CAACX,UAAD,EAAaE,SAAb,CAAtD,CAAjB,CA7CwE,CA8CxE;AAEH;AAED,OAAO,SAASS,cAAT,CAAwBjB,MAAxB,EAAgCC,KAAhC,EAAsC;AACzC,MAAGA,KAAK,GAAGD,MAAX,EAAkB;AAAC;AACf,WAAO,IAAP;AACH,GAFD,MAEM,IAAGA,MAAM,GAAGC,KAAZ,EAAkB;AAAE;AACtB,WAAO,KAAP;AACH,GAFK,MAED;AACD,UAAMiB,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAb;AACA,WAAOH,IAAI,KAAK,CAAT,GAAc,IAAd,GAAqB,KAA5B;AACH;AACJ;;AAED,SAASR,UAAT,CAAoBY,GAApB,EAAyBC,GAAzB,EAA8B;AAC1B,SAAOJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBE,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX,IAA+CA,GAAtD;AACD","sourcesContent":["export function recursiveDivision(grid,row, col, height, width, orientation){\r\n    if(width < 3 || height < 3)return;\r\n\r\n    let isHorizontal = orientation;\r\n\r\n\r\n\r\n\r\n    let wallcol = 0;\r\n    let wallrow = 0;\r\n\r\n\r\n    let newHeight1 = height;\r\n    let newHeight2 = height;\r\n    let newWidth1 = width;\r\n    let newWidth2= width;\r\n    \r\n    if(isHorizontal){\r\n        wallrow = row + getRandNum(col, (height - 2));\r\n        newHeight1 = wallrow - col;\r\n        newHeight2 = col + height - wallrow;\r\n\r\n        for(let i = 0; i < width; i++){\r\n            grid[i][wallrow].isWall = true;\r\n        }\r\n    }else{\r\n        wallcol = col + getRandNum(row, (width - 2));\r\n        newWidth1 = wallcol - row ;\r\n        newWidth2 = row + width - wallcol;\r\n\r\n        for(let i = 0; i < height; i++){\r\n            grid[wallcol][i].isWall = true; \r\n        }\r\n    }\r\n    const passageCol = wallcol + (isHorizontal ? getRandNum(row, (width - 1)) : 0);\r\n    const passageRow = wallrow + (isHorizontal ? 0 : getRandNum(col, (height - 1)));\r\n    grid[passageCol][passageRow].isWall = false;\r\n\r\n    console.log(\"wall (r,c): \", wallrow, wallcol);\r\n    console.log(\"pass (r,c): \", passageRow, passageCol);\r\n    console.log('node: ',grid[passageCol][passageRow]);\r\n    console.log(\"---------------------\");\r\n\r\n\r\n\r\n    recursiveDivision(grid, row, col, newHeight1, newWidth1, getOrientation(newHeight1, newWidth1));\r\n    //recursiveDivision(grid, wallrow, wallcol, newHeight2, newWidth2, getOrientation(newHeight2, newWidth2));\r\n    \r\n}\r\n\r\nexport function getOrientation(height, width){\r\n    if(width < height){//is horizontal\r\n        return true;\r\n    }else if(height < width){ // is vertical\r\n        return false;\r\n    }else{\r\n        const rand = Math.floor(Math.random() * 2);\r\n        return rand === 0  ? true : false;\r\n    }\r\n}\r\n\r\nfunction getRandNum(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) ) + min;\r\n  }\r\n\r\n"]},"metadata":{},"sourceType":"module"}