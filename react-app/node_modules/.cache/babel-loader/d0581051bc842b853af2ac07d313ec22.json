{"ast":null,"code":"export function recursiveDivision(grid, row, col, height, width, orientation) {\n  if (width < 3 || height < 3) return;\n  let isHorizontal = orientation;\n  let newHeight1;\n  let newHeight2;\n  let newWidth1;\n  let newWidth2;\n  let col2;\n  let row2;\n  let wallcol = col;\n  let wallrow = row;\n  let passageCol;\n  let passageRow;\n  let hole; //row = y, col = x\n\n  if (isHorizontal) {\n    wallrow = row + getRandNum(height - 2);\n    let rand = getRandNum(width - 1);\n    hole = col + rand;\n    console.log('whorse-hole', hole);\n    newHeight1 = wallrow - row;\n    newWidth1 = width;\n    newHeight2 = row + height - wallrow;\n    newWidth2 = width;\n    row2 = wallrow;\n    col2 = col;\n\n    for (let i = col; i < col + width; i++) {\n      grid[i][wallrow].isWall = true;\n    }\n\n    grid[hole][wallrow].isWall = false; // passageCol = wallcol + (isHorizontal ? getRandNum(col, (width - 1)) : 0);\n    // passageRow = wallrow + (isHorizontal ? 0 : getRandNum(row, (height - 1)));\n  } else {\n    wallcol = col + getRandNum(width - 2);\n    let rand = getRandNum(height - 1);\n    hole = col + rand;\n    console.log('vert-hole', hole);\n    newHeight1 = height;\n    newWidth1 = wallcol - col;\n    newHeight2 = height;\n    newWidth2 = row + width - wallcol;\n    row2 = row;\n    col2 = wallcol;\n\n    for (let i = row; i < row + height; i++) {\n      grid[wallcol][i].isWall = true;\n    }\n\n    grid[wallcol][hole].isWall = false; // passageCol = wallcol + (isHorizontal ? getRandNum(col, (width - 1)) : 0);\n    // passageRow = wallrow + (isHorizontal ? 0 : getRandNum(row, (height - 1)));\n  }\n\n  console.log(\"wall (r,c): \", wallrow, wallcol);\n  console.log(\"---------------------\"); //recursiveDivision(grid, row, col, newHeight1, newWidth1, getOrientation(newHeight1, newWidth1));\n\n  recursiveDivision(grid, row2, col2, newHeight2, newWidth2, getOrientation(newHeight2, newWidth2));\n}\nexport function getOrientation(height, width) {\n  if (width < height) {\n    //is horizontal\n    return true;\n  } else if (height < width) {\n    // is vertical\n    return false;\n  } else {\n    const rand = Math.floor(Math.random() * 2);\n    return rand === 0 ? true : false;\n  }\n} // function getRandNum(min, max) {\n//     return Math.floor(Math.random() * (max - min + 1) ) + min;\n//   }\n\nfunction getRandNum(max) {\n  return Math.floor(Math.random() * max);\n}","map":{"version":3,"sources":["C:/My Projects/pathing-Algorithms/react-app/src/algorithms/mazeGen/recursiveDivision.js"],"names":["recursiveDivision","grid","row","col","height","width","orientation","isHorizontal","newHeight1","newHeight2","newWidth1","newWidth2","col2","row2","wallcol","wallrow","passageCol","passageRow","hole","getRandNum","rand","console","log","i","isWall","getOrientation","Math","floor","random","max"],"mappings":"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","sourcesContent":["export function recursiveDivision(grid,row, col, height, width, orientation){\r\n    if(width < 3 || height < 3)return;\r\n\r\n    let isHorizontal = orientation;\r\n\r\n    let newHeight1;\r\n    let newHeight2;\r\n    let newWidth1;\r\n    let newWidth2;\r\n    let col2;\r\n    let row2;\r\n    let wallcol = col;\r\n    let wallrow = row;\r\n    let passageCol;\r\n    let passageRow;\r\n    let hole;\r\n    \r\n    //row = y, col = x\r\n    if(isHorizontal){\r\n        wallrow = row + getRandNum(height - 2);\r\n        let rand = getRandNum(width - 1);\r\n        hole = col + rand;\r\n        console.log('whorse-hole', hole)\r\n        newHeight1 = wallrow - row;\r\n        newWidth1 = width;\r\n\r\n        newHeight2 = row + height - wallrow;\r\n        newWidth2 = width;\r\n\r\n        row2 = wallrow;\r\n        col2 = col;\r\n        \r\n        for(let i = col; i < col+width; i++){\r\n            grid[i][wallrow].isWall = true;\r\n        }\r\n        grid[hole][wallrow].isWall = false;\r\n\r\n        // passageCol = wallcol + (isHorizontal ? getRandNum(col, (width - 1)) : 0);\r\n        // passageRow = wallrow + (isHorizontal ? 0 : getRandNum(row, (height - 1)));\r\n    }else{\r\n        wallcol = col + getRandNum(width - 2);\r\n        let rand = getRandNum(height - 1);\r\n        hole = col + rand;\r\n        console.log('vert-hole', hole)\r\n\r\n        newHeight1 = height;\r\n        newWidth1 = wallcol - col;\r\n\r\n        newHeight2 = height;\r\n        newWidth2 = row + width - wallcol;\r\n\r\n        row2 = row;\r\n        col2 = wallcol;\r\n       \r\n        for(let i = row; i < row + height; i++){\r\n            grid[wallcol][i].isWall = true; \r\n        }\r\n\r\n        grid[wallcol][hole].isWall = false;\r\n\r\n        // passageCol = wallcol + (isHorizontal ? getRandNum(col, (width - 1)) : 0);\r\n        // passageRow = wallrow + (isHorizontal ? 0 : getRandNum(row, (height - 1)));\r\n    }\r\n\r\n    \r\n\r\n    console.log(\"wall (r,c): \", wallrow, wallcol);\r\n    console.log(\"---------------------\");\r\n\r\n\r\n\r\n    //recursiveDivision(grid, row, col, newHeight1, newWidth1, getOrientation(newHeight1, newWidth1));\r\n    recursiveDivision(grid, row2, col2, newHeight2, newWidth2, getOrientation(newHeight2, newWidth2));\r\n    \r\n}\r\n\r\nexport function getOrientation(height, width){\r\n    if(width < height){//is horizontal\r\n        return true;\r\n    }else if(height < width){ // is vertical\r\n        return false;\r\n    }else{\r\n        const rand = Math.floor(Math.random() * 2);\r\n        return rand === 0  ? true : false;\r\n    }\r\n}\r\n\r\n// function getRandNum(min, max) {\r\n//     return Math.floor(Math.random() * (max - min + 1) ) + min;\r\n//   }\r\n\r\nfunction getRandNum(max) {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}