{"ast":null,"code":"export function dijkstra(start, end, grid) {\n  let unvistedNodes = getNodes(grid);\n  let vistedNodes = [];\n  start.distance = 0;\n\n  while (unvistedNodes.length > 0) {\n    sortNodes(unvistedNodes); //console.log(unvistedNodes);\n\n    const currentNode = unvistedNodes.shift();\n    console.log(\"currentnode\", currentNode);\n    const neighbors = getNeighbors(currentNode, grid);\n  }\n} //turns the 2d array into a 1d array for easier usage\n\nfunction getNodes(grid) {\n  const newGrid = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      newGrid.push(node);\n    }\n  }\n\n  return newGrid;\n}\n\nfunction sortNodes(unvisitedNodes) {\n  unvisitedNodes.sort((a, b) => a.distance - b.distance);\n}\n\nfunction getNeighbors(node, grid) {\n  const neighbors = []; // prettier-ignore\n\n  for (const i of [[0, -1], [0, 1], [-1, 0], [1, 0]]) {\n    const temp = [node.row + i[0], node.col + i[1]]; // check if the neighbor node is within the grid bounds\n\n    if (temp[0] < 0 || temp[0] > grid.length - 1 || temp[1] < 0 || temp[1] > grid.length - 1) {\n      continue;\n    }\n\n    ;\n    const neighbor = grid[temp[1]][temp[0]];\n\n    if (!neighbor.isWall) {\n      nei;\n      neighbors.push(neighbor);\n    }\n  }\n\n  return neighbors;\n}","map":{"version":3,"sources":["C:/My Projects/pathing-Algorithms/react-app/src/algorithms/dijkstra.js"],"names":["dijkstra","start","end","grid","unvistedNodes","getNodes","vistedNodes","distance","length","sortNodes","currentNode","shift","console","log","neighbors","getNeighbors","newGrid","row","node","push","unvisitedNodes","sort","a","b","i","temp","col","neighbor","isWall","nei"],"mappings":"AAAA,OAAO,SAASA,QAAT,CAAkBC,KAAlB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoC;AACvC,MAAIC,aAAa,GAAGC,QAAQ,CAACF,IAAD,CAA5B;AACA,MAAIG,WAAW,GAAG,EAAlB;AACAL,EAAAA,KAAK,CAACM,QAAN,GAAiB,CAAjB;;AAEA,SAAOH,aAAa,CAACI,MAAd,GAAuB,CAA9B,EAAiC;AAC7BC,IAAAA,SAAS,CAACL,aAAD,CAAT,CAD6B,CAE7B;;AACA,UAAMM,WAAW,GAAGN,aAAa,CAACO,KAAd,EAApB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,WAA3B;AACA,UAAMI,SAAS,GAAGC,YAAY,CAACL,WAAD,EAAcP,IAAd,CAA9B;AAEH;AACJ,C,CAED;;AACA,SAASE,QAAT,CAAkBF,IAAlB,EAAwB;AACpB,QAAMa,OAAO,GAAG,EAAhB;;AACA,OAAK,MAAMC,GAAX,IAAkBd,IAAlB,EAAwB;AACpB,SAAK,MAAMe,IAAX,IAAmBD,GAAnB,EAAwB;AACpBD,MAAAA,OAAO,CAACG,IAAR,CAAaD,IAAb;AACH;AACJ;;AACD,SAAOF,OAAP;AACH;;AAED,SAASP,SAAT,CAAmBW,cAAnB,EAAmC;AAC/BA,EAAAA,cAAc,CAACC,IAAf,CAAoB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACf,QAAF,GAAagB,CAAC,CAAChB,QAA7C;AACH;;AAED,SAASQ,YAAT,CAAsBG,IAAtB,EAA4Bf,IAA5B,EAAkC;AAC9B,QAAMW,SAAS,GAAG,EAAlB,CAD8B,CAE9B;;AACA,OAAK,MAAMU,CAAX,IAAgB,CAAC,CAAC,CAAD,EAAI,CAAC,CAAL,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAgB,CAAC,CAAC,CAAF,EAAK,CAAL,CAAhB,EAAwB,CAAC,CAAD,EAAI,CAAJ,CAAxB,CAAhB,EAAiD;AAC7C,UAAMC,IAAI,GAAG,CAACP,IAAI,CAACD,GAAL,GAAWO,CAAC,CAAC,CAAD,CAAb,EAAkBN,IAAI,CAACQ,GAAL,GAAWF,CAAC,CAAC,CAAD,CAA9B,CAAb,CAD6C,CAE7C;;AACA,QAAGC,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV,IAAeA,IAAI,CAAC,CAAD,CAAJ,GAAUtB,IAAI,CAACK,MAAL,GAAY,CAArC,IAA0CiB,IAAI,CAAC,CAAD,CAAJ,GAAU,CAApD,IAAyDA,IAAI,CAAC,CAAD,CAAJ,GAAUtB,IAAI,CAACK,MAAL,GAAY,CAAlF,EAAoF;AAAC;AAAS;;AAAA;AAE9F,UAAMmB,QAAQ,GAAGxB,IAAI,CAACsB,IAAI,CAAC,CAAD,CAAL,CAAJ,CAAcA,IAAI,CAAC,CAAD,CAAlB,CAAjB;;AACA,QAAG,CAACE,QAAQ,CAACC,MAAb,EAAqB;AACjBC,MAAAA,GAAG;AACHf,MAAAA,SAAS,CAACK,IAAV,CAAeQ,QAAf;AACH;AACJ;;AAED,SAAOb,SAAP;AACH","sourcesContent":["export function dijkstra(start, end, grid) {\r\n    let unvistedNodes = getNodes(grid);\r\n    let vistedNodes = [];\r\n    start.distance = 0;\r\n\r\n    while (unvistedNodes.length > 0) {\r\n        sortNodes(unvistedNodes);\r\n        //console.log(unvistedNodes);\r\n        const currentNode = unvistedNodes.shift();\r\n        console.log(\"currentnode\", currentNode);\r\n        const neighbors = getNeighbors(currentNode, grid);\r\n\r\n    }\r\n}\r\n\r\n//turns the 2d array into a 1d array for easier usage\r\nfunction getNodes(grid) {\r\n    const newGrid = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            newGrid.push(node);\r\n        }\r\n    }\r\n    return newGrid;\r\n}\r\n\r\nfunction sortNodes(unvisitedNodes) {\r\n    unvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n}\r\n\r\nfunction getNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    // prettier-ignore\r\n    for (const i of [[0, -1],[0, 1],[-1, 0],[1, 0]]) {\r\n        const temp = [node.row + i[0], node.col + i[1]];\r\n        // check if the neighbor node is within the grid bounds\r\n        if(temp[0] < 0 || temp[0] > grid.length-1 || temp[1] < 0 || temp[1] > grid.length-1){continue};\r\n        \r\n        const neighbor = grid[temp[1]][temp[0]];\r\n        if(!neighbor.isWall) {\r\n            nei\r\n            neighbors.push(neighbor);\r\n        }\r\n    }\r\n    \r\n    return neighbors;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}