{"ast":null,"code":"export function recursiveDivision(grid, row, col, height, width, orientation) {\n  if (width < 2 || height < 2) return;\n  let isHorizontal = orientation; //get the column or row that a wall will be drawn in\n\n  const wallrow = row + (isHorizontal ? 0 : Math.floor(Math.random() * (width - 2)));\n  const wallcol = col + (isHorizontal ? Math.floor(Math.random() * (height - 2)) : 0);\n  console.log(\"wallrow\", wallrow);\n  console.log(\"wallcol\", wallcol); //random node in the wall will be selected as a passage\n\n  const passageRow = wallrow + (isHorizontal ? Math.floor(Math.random() * (width - 1)) : 0);\n  const passageCol = wallcol + (isHorizontal ? 0 : Math.floor(Math.random() * (height - 1)));\n  console.log(\"passrow\", passageRow);\n  console.log(\"passcol\", passageCol); //draw the wall\n\n  if (isHorizontal) {\n    for (let i = 0; i < width; i++) {\n      grid[i][wallcol].isWall = true;\n    }\n  } else {\n    for (let i = 0; i < height; i++) {\n      grid[wallrow][i].isWall = true;\n    }\n  }\n\n  grid[passageRow][passageCol].isWall = false;\n  let newHeight1 = height;\n  let newHeight2 = height;\n  let newWidth1 = width;\n  let newWidth2 = width;\n\n  if (isHorizontal) {\n    newHeight1 = wallcol + 1;\n    newHeight2 = height - wallcol;\n  } else {\n    newWidth1 = wallrow + 1;\n    newWidth2 = width - wallrow + 1;\n  }\n\n  recursiveDivision(grid, row, col, newHeight1, newWidth1, getOrientation(newHeight1, newWidth1));\n  recursiveDivision(grid, row, col, newHeight2, newWidth2, getOrientation(newHeight2, newWidth2));\n}\nexport function getOrientation(height, width) {\n  if (width < height) {\n    //is horizontal\n    return true;\n  } else if (height < width) {\n    // is vertical\n    return false;\n  } else {\n    const rand = Math.floor(Math.random() * 2);\n    return rand === 0 ? true : false;\n  }\n}\n\nfunction getNeighbors(node, grid) {\n  // prettier-ignore\n  //console.log('node',node);\n  for (const i of [[0, -1], [0, 1], [-1, 0], [1, 0]]) {\n    const temp = [node.row + i[0], node.col + i[1]]; // check if the neighbor node is within the grid bounds\n    //console.log('temp', temp);\n\n    if (temp[0] < 0 || temp[0] > 29 || temp[1] < 0 || temp[1] > 49) {\n      continue;\n    }\n\n    ;\n    const neighbor = grid[temp[1]][temp[0]]; //console.log('neighbor', neighbor);\n\n    if (!neighbor.isWall) {\n      neighbor.distance = node.distance + 1;\n      neighbor.prevNode = node;\n    }\n  }\n}","map":{"version":3,"sources":["C:/My Projects/pathing-Algorithms/react-app/src/algorithms/mazeGen/recursiveDivision.js"],"names":["recursiveDivision","grid","row","col","height","width","orientation","isHorizontal","wallrow","Math","floor","random","wallcol","console","log","passageRow","passageCol","i","isWall","newHeight1","newHeight2","newWidth1","newWidth2","getOrientation","rand","getNeighbors","node","temp","neighbor","distance","prevNode"],"mappings":"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","sourcesContent":["export function recursiveDivision(grid,row, col, height, width, orientation){\r\n    if(width < 2 || height < 2)return;\r\n\r\n    let isHorizontal = orientation;\r\n\r\n    //get the column or row that a wall will be drawn in\r\n    const wallrow = row + (isHorizontal ? 0 : Math.floor(Math.random() * (width - 2)));\r\n    const wallcol = col + (isHorizontal ? Math.floor(Math.random() * (height - 2)) : 0);\r\n    console.log(\"wallrow\", wallrow);\r\n    console.log(\"wallcol\", wallcol);\r\n\r\n    //random node in the wall will be selected as a passage\r\n    const passageRow = wallrow + (isHorizontal ? Math.floor(Math.random() * (width - 1)) : 0);\r\n    const passageCol = wallcol + (isHorizontal ? 0 : Math.floor(Math.random() * (height - 1)));\r\n    console.log(\"passrow\", passageRow);\r\n    console.log(\"passcol\", passageCol);\r\n\r\n    //draw the wall\r\n    if(isHorizontal){\r\n        for(let i = 0; i < width; i++){\r\n            grid[i][wallcol].isWall = true;\r\n        }  \r\n    }else{\r\n        for(let i = 0; i < height; i++){\r\n            grid[wallrow][i].isWall = true;\r\n        }\r\n    }\r\n    grid[passageRow][passageCol].isWall = false;\r\n\r\n\r\n    let newHeight1 = height;\r\n    let newHeight2 = height;\r\n    let newWidth1 = width;\r\n    let newWidth2= width;\r\n\r\n    if(isHorizontal){\r\n        newHeight1 =  wallcol + 1;\r\n        newHeight2 = height - wallcol;\r\n    }else{\r\n        newWidth1 = wallrow + 1;\r\n        newWidth2 = width - wallrow + 1;\r\n    }\r\n    recursiveDivision(grid, row, col, newHeight1, newWidth1, getOrientation(newHeight1, newWidth1));\r\n    recursiveDivision(grid,row, col, newHeight2, newWidth2, getOrientation(newHeight2, newWidth2));\r\n    \r\n}\r\n\r\nexport function getOrientation(height, width){\r\n    if(width < height){//is horizontal\r\n        return true;\r\n    }else if(height < width){ // is vertical\r\n        return false;\r\n    }else{\r\n        const rand = Math.floor(Math.random() * 2);\r\n        return rand === 0  ? true : false;\r\n    }\r\n}\r\n\r\nfunction getNeighbors(node, grid) {\r\n    // prettier-ignore\r\n    //console.log('node',node);\r\n    for (const i of [[0, -1],[0, 1],[-1, 0],[1, 0]]) {\r\n        const temp = [node.row + i[0], node.col + i[1]];\r\n        // check if the neighbor node is within the grid bounds\r\n        //console.log('temp', temp);\r\n        if(temp[0] < 0 || temp[0] > 29 || temp[1] < 0 || temp[1] > 49){continue};\r\n        \r\n        const neighbor = grid[temp[1]][temp[0]];\r\n        //console.log('neighbor', neighbor);\r\n        if(!neighbor.isWall ) {\r\n            \r\n            neighbor.distance = node.distance + 1;\r\n            neighbor.prevNode = node; \r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}