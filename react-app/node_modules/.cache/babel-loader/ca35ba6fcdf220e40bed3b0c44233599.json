{"ast":null,"code":"export function recursiveDivision(grid, row, col, height, width, orientation) {\n  if (width < 3 || height < 3) return;\n  let isHorizontal = orientation;\n  console.log(\"wallcol\", wallcol);\n  console.log(\"wallrow\", wallrow);\n  console.log(\"passrow\", passageRow);\n  console.log(\"passcol\", passageCol);\n  console.log('node: ', grid[passageCol][passageRow]);\n  console.log(\"---------------------\");\n  let wallcol = 0;\n  let wallrow = 0;\n  let passageCol = 0;\n  let passageRow = 0;\n  let newHeight1 = height;\n  let newHeight2 = height;\n  let newWidth1 = width;\n  let newWidth2 = width;\n\n  if (isHorizontal) {\n    wallrow = getRandNum(col, height - 2);\n    passageCol = wallcol + getRandNum(row, width - 1);\n  } else {\n    wallcol = getRandNum(row, width - 2);\n    passageRow = wallrow + getRandNum(col, height - 1);\n  }\n\n  grid[passageCol][passageRow].isWall = false;\n  recursiveDivision(grid, wallrow, wallcol, newHeight1, newWidth1, getOrientation(newHeight1, newWidth1)); //recursiveDivision(grid, wallrow, wallcol, newHeight2, newWidth2, getOrientation(newHeight2, newWidth2));\n}\nexport function getOrientation(height, width) {\n  if (width < height) {\n    //is horizontal\n    return true;\n  } else if (height < width) {\n    // is vertical\n    return false;\n  } else {\n    const rand = Math.floor(Math.random() * 2);\n    return rand === 0 ? true : false;\n  }\n}\n\nfunction getRandNum(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}","map":{"version":3,"sources":["C:/My Projects/pathing-Algorithms/react-app/src/algorithms/mazeGen/recursiveDivision.js"],"names":["recursiveDivision","grid","row","col","height","width","orientation","isHorizontal","console","log","wallcol","wallrow","passageRow","passageCol","newHeight1","newHeight2","newWidth1","newWidth2","getRandNum","isWall","getOrientation","rand","Math","floor","random","min","max"],"mappings":"AAAA,OAAO,SAASA,iBAAT,CAA2BC,IAA3B,EAAgCC,GAAhC,EAAqCC,GAArC,EAA0CC,MAA1C,EAAkDC,KAAlD,EAAyDC,WAAzD,EAAqE;AACxE,MAAGD,KAAK,GAAG,CAAR,IAAaD,MAAM,GAAG,CAAzB,EAA2B;AAE3B,MAAIG,YAAY,GAAGD,WAAnB;AAGAE,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,OAAvB;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBE,OAAvB;AAIAH,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBG,UAAvB;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBI,UAAvB;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBR,IAAI,CAACY,UAAD,CAAJ,CAAiBD,UAAjB,CAArB;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AAEA,MAAIC,OAAO,GAAG,CAAd;AACA,MAAIC,OAAO,GAAG,CAAd;AACA,MAAIE,UAAU,GAAG,CAAjB;AACA,MAAID,UAAU,GAAG,CAAjB;AAEA,MAAIE,UAAU,GAAGV,MAAjB;AACA,MAAIW,UAAU,GAAGX,MAAjB;AACA,MAAIY,SAAS,GAAGX,KAAhB;AACA,MAAIY,SAAS,GAAEZ,KAAf;;AAEA,MAAGE,YAAH,EAAgB;AACZI,IAAAA,OAAO,GAAGO,UAAU,CAACf,GAAD,EAAOC,MAAM,GAAG,CAAhB,CAApB;AACAS,IAAAA,UAAU,GAAGH,OAAO,GAAIQ,UAAU,CAAChB,GAAD,EAAOG,KAAK,GAAG,CAAf,CAAlC;AACH,GAHD,MAGK;AACDK,IAAAA,OAAO,GAAGQ,UAAU,CAAChB,GAAD,EAAOG,KAAK,GAAG,CAAf,CAApB;AACAO,IAAAA,UAAU,GAAGD,OAAO,GAAGO,UAAU,CAACf,GAAD,EAAOC,MAAM,GAAG,CAAhB,CAAjC;AACH;;AAEDH,EAAAA,IAAI,CAACY,UAAD,CAAJ,CAAiBD,UAAjB,EAA6BO,MAA7B,GAAsC,KAAtC;AAMAnB,EAAAA,iBAAiB,CAACC,IAAD,EAAOU,OAAP,EAAgBD,OAAhB,EAAyBI,UAAzB,EAAqCE,SAArC,EAAgDI,cAAc,CAACN,UAAD,EAAaE,SAAb,CAA9D,CAAjB,CAxCwE,CAyCxE;AAEH;AAED,OAAO,SAASI,cAAT,CAAwBhB,MAAxB,EAAgCC,KAAhC,EAAsC;AACzC,MAAGA,KAAK,GAAGD,MAAX,EAAkB;AAAC;AACf,WAAO,IAAP;AACH,GAFD,MAEM,IAAGA,MAAM,GAAGC,KAAZ,EAAkB;AAAE;AACtB,WAAO,KAAP;AACH,GAFK,MAED;AACD,UAAMgB,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAb;AACA,WAAOH,IAAI,KAAK,CAAT,GAAc,IAAd,GAAqB,KAA5B;AACH;AACJ;;AAED,SAASH,UAAT,CAAoBO,GAApB,EAAyBC,GAAzB,EAA8B;AAC1B,SAAOJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBE,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX,IAA+CA,GAAtD;AACD","sourcesContent":["export function recursiveDivision(grid,row, col, height, width, orientation){\r\n    if(width < 3 || height < 3)return;\r\n\r\n    let isHorizontal = orientation;\r\n\r\n\r\n    console.log(\"wallcol\", wallcol);\r\n    console.log(\"wallrow\", wallrow);\r\n\r\n  \r\n\r\n    console.log(\"passrow\", passageRow);\r\n    console.log(\"passcol\", passageCol);\r\n    console.log('node: ',grid[passageCol][passageRow]);\r\n    console.log(\"---------------------\");\r\n\r\n    let wallcol = 0;\r\n    let wallrow = 0;\r\n    let passageCol = 0;\r\n    let passageRow = 0;\r\n\r\n    let newHeight1 = height;\r\n    let newHeight2 = height;\r\n    let newWidth1 = width;\r\n    let newWidth2= width;\r\n    \r\n    if(isHorizontal){\r\n        wallrow = getRandNum(col, (height - 2));\r\n        passageCol = wallcol +  getRandNum(row, (width - 1));\r\n    }else{\r\n        wallcol = getRandNum(row, (width - 2));\r\n        passageRow = wallrow + getRandNum(col, (height - 1));\r\n    }\r\n    \r\n    grid[passageCol][passageRow].isWall = false;\r\n\r\n\r\n\r\n\r\n\r\n    recursiveDivision(grid, wallrow, wallcol, newHeight1, newWidth1, getOrientation(newHeight1, newWidth1));\r\n    //recursiveDivision(grid, wallrow, wallcol, newHeight2, newWidth2, getOrientation(newHeight2, newWidth2));\r\n    \r\n}\r\n\r\nexport function getOrientation(height, width){\r\n    if(width < height){//is horizontal\r\n        return true;\r\n    }else if(height < width){ // is vertical\r\n        return false;\r\n    }else{\r\n        const rand = Math.floor(Math.random() * 2);\r\n        return rand === 0  ? true : false;\r\n    }\r\n}\r\n\r\nfunction getRandNum(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) ) + min;\r\n  }\r\n\r\n"]},"metadata":{},"sourceType":"module"}