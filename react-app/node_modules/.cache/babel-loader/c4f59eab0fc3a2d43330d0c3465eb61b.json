{"ast":null,"code":"export function dfs(grid) {\n  setNodesAsWalls(grid); // const startNode = grid[15][15];\n  // const visited = [];\n  // const stack = [];\n  // stack.push(startNode);\n  // //console.log(visited);\n  // let i = 0;\n  // while(i < 10){\n  //     const currentNode = stack.pop();\n  //     //console.log('currentNode', currentNode);\n  //     visited.push(currentNode);\n  //     const neighbors = getNeighbors(currentNode, grid, visited);\n  //     for (let i = neighbors.length; i > 0; i--){\n  //         let temp = Math.floor(Math.random() * i);\n  //         temp = neighbors.splice(temp,1)\n  //         stack.push(temp[0]);\n  //     }\n  //     currentNode.isWall = true;\n  //     i+=1;\n  // }\n}\n\nfunction getNeighbors(node, grid, visited) {\n  // prettier-ignore\n  const neighbors = [];\n\n  for (const i of [[0, -1], [0, 1], [-1, 0], [1, 0]]) {\n    console.log('hei node', node);\n    const temp = [node.row + i[0], node.col + i[1]]; // check if the neighbor node is within the grid bounds\n\n    if (temp[0] < 0 || temp[0] > 29 || temp[1] < 0 || temp[1] > 49) {\n      continue;\n    }\n\n    ;\n    const neighbor = grid[temp[1]][temp[0]];\n\n    if (!visited.includes(neighbor) && !neighbor.isWall) {\n      neighbors.push(neighbor);\n    }\n  }\n\n  return neighbors;\n}\n\nfunction setNodesAsWalls(grid) {\n  grid.forEach(array => {\n    array.forEach(node => {\n      node.isWall = true;\n    });\n  });\n}","map":{"version":3,"sources":["C:/My Projects/pathing-Algorithms/react-app/src/algorithms/mazeGen/depthFirst.js"],"names":["dfs","grid","setNodesAsWalls","getNeighbors","node","visited","neighbors","i","console","log","temp","row","col","neighbor","includes","isWall","push","forEach","array"],"mappings":"AAEA,OAAO,SAASA,GAAT,CAAaC,IAAb,EAAkB;AACrBC,EAAAA,eAAe,CAACD,IAAD,CAAf,CADqB,CAErB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEH;;AAED,SAASE,YAAT,CAAsBC,IAAtB,EAA4BH,IAA5B,EAAkCI,OAAlC,EAA2C;AACvC;AACA,QAAMC,SAAS,GAAG,EAAlB;;AACA,OAAK,MAAMC,CAAX,IAAgB,CAAC,CAAC,CAAD,EAAI,CAAC,CAAL,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAgB,CAAC,CAAC,CAAF,EAAK,CAAL,CAAhB,EAAwB,CAAC,CAAD,EAAI,CAAJ,CAAxB,CAAhB,EAAiD;AAC7CC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBL,IAAvB;AACA,UAAMM,IAAI,GAAG,CAACN,IAAI,CAACO,GAAL,GAAWJ,CAAC,CAAC,CAAD,CAAb,EAAkBH,IAAI,CAACQ,GAAL,GAAWL,CAAC,CAAC,CAAD,CAA9B,CAAb,CAF6C,CAG7C;;AACA,QAAGG,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV,IAAeA,IAAI,CAAC,CAAD,CAAJ,GAAU,EAAzB,IAA+BA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAzC,IAA8CA,IAAI,CAAC,CAAD,CAAJ,GAAU,EAA3D,EAA8D;AAAC;AAAS;;AAAA;AACxE,UAAMG,QAAQ,GAAGZ,IAAI,CAACS,IAAI,CAAC,CAAD,CAAL,CAAJ,CAAcA,IAAI,CAAC,CAAD,CAAlB,CAAjB;;AACA,QAAG,CAACL,OAAO,CAACS,QAAR,CAAiBD,QAAjB,CAAD,IAA+B,CAACA,QAAQ,CAACE,MAA5C,EAAoD;AAChDT,MAAAA,SAAS,CAACU,IAAV,CAAeH,QAAf;AACH;AACJ;;AACD,SAAOP,SAAP;AACH;;AAED,SAASJ,eAAT,CAAyBD,IAAzB,EAA8B;AAC1BA,EAAAA,IAAI,CAACgB,OAAL,CAAaC,KAAK,IAAI;AAClBA,IAAAA,KAAK,CAACD,OAAN,CAAcb,IAAI,IAAI;AAClBA,MAAAA,IAAI,CAACW,MAAL,GAAc,IAAd;AAAmB,KADvB;AAEH,GAHD;AAKH","sourcesContent":["\r\n\r\nexport function dfs(grid){\r\n    setNodesAsWalls(grid);\r\n    // const startNode = grid[15][15];\r\n    // const visited = [];\r\n    // const stack = [];\r\n    // stack.push(startNode);\r\n    // //console.log(visited);\r\n\r\n    // let i = 0;\r\n    // while(i < 10){\r\n    //     const currentNode = stack.pop();\r\n    //     //console.log('currentNode', currentNode);\r\n    //     visited.push(currentNode);\r\n    //     const neighbors = getNeighbors(currentNode, grid, visited);\r\n    //     for (let i = neighbors.length; i > 0; i--){\r\n    //         let temp = Math.floor(Math.random() * i);\r\n    //         temp = neighbors.splice(temp,1)\r\n    //         stack.push(temp[0]);\r\n    //     }\r\n    //     currentNode.isWall = true;\r\n    //     i+=1;\r\n    // }\r\n\r\n}\r\n\r\nfunction getNeighbors(node, grid, visited) {\r\n    // prettier-ignore\r\n    const neighbors = [];\r\n    for (const i of [[0, -1],[0, 1],[-1, 0],[1, 0]]) {\r\n        console.log('hei node',node);\r\n        const temp = [node.row + i[0], node.col + i[1]];\r\n        // check if the neighbor node is within the grid bounds\r\n        if(temp[0] < 0 || temp[0] > 29 || temp[1] < 0 || temp[1] > 49){continue};\r\n        const neighbor = grid[temp[1]][temp[0]];\r\n        if(!visited.includes(neighbor) && !neighbor.isWall) {\r\n            neighbors.push(neighbor);\r\n        }\r\n    }\r\n    return neighbors;\r\n}\r\n\r\nfunction setNodesAsWalls(grid){\r\n    grid.forEach(array => { \r\n        array.forEach(node => {\r\n            node.isWall = true});\r\n    });\r\n\r\n}"]},"metadata":{},"sourceType":"module"}