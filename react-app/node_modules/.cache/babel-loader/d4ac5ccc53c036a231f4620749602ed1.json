{"ast":null,"code":"export function dijkstra(start, end, grid) {\n  let unvistedNodes = getNodes(grid);\n  let vistedNodes = [];\n  start.distance = 0;\n  start.isVisited = true;\n\n  while (unvistedNodes.length > 0) {\n    sortNodes(unvistedNodes);\n    const currentNode = unvistedNodes.shift();\n    currentNode.isVisited = true;\n    vistedNodes.push(currentNode);\n    if (currentNode === end) return vistedNodes;\n    getNeighbors(currentNode, grid);\n  }\n} //turns the 2d array into a 1d array for easier usage\n\nfunction getNodes(grid) {\n  const newGrid = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      newGrid.push(node);\n    }\n  }\n\n  return newGrid;\n}\n\nfunction sortNodes(unvisitedNodes) {\n  unvisitedNodes.sort((a, b) => a.distance - b.distance);\n}\n\nfunction getNeighbors(node, grid) {\n  // prettier-ignore\n  for (const i of [[0, -1], [0, 1], [-1, 0], [1, 0]]) {\n    const temp = [node.row + i[0], node.col + i[1]]; // check if the neighbor node is within the grid bounds\n\n    if (temp[0] < 0 || temp[0] > grid.length - 1 || temp[1] < 0 || temp[1] > grid.length - 1) {\n      continue;\n    }\n\n    ;\n    const neighbor = grid[temp[1]][temp[0]];\n\n    if (!neighbor.isWall && !neighbor.isVisited) {\n      neighbor.distance = node.distance + 1;\n      neighbor.prevNode = node;\n    }\n  }\n}\n\nexport function getShortestPath(endNode) {\n  path = [];\n  let currentNode = endNode;\n\n  while (currentNode != null) {\n    path.push(currentNode);\n    currentNode = currentNode.prevNode;\n  }\n}","map":{"version":3,"sources":["C:/My Projects/pathing-Algorithms/react-app/src/algorithms/dijkstra.js"],"names":["dijkstra","start","end","grid","unvistedNodes","getNodes","vistedNodes","distance","isVisited","length","sortNodes","currentNode","shift","push","getNeighbors","newGrid","row","node","unvisitedNodes","sort","a","b","i","temp","col","neighbor","isWall","prevNode","getShortestPath","endNode","path"],"mappings":"AAAA,OAAO,SAASA,QAAT,CAAkBC,KAAlB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoC;AACvC,MAAIC,aAAa,GAAGC,QAAQ,CAACF,IAAD,CAA5B;AACA,MAAIG,WAAW,GAAG,EAAlB;AACAL,EAAAA,KAAK,CAACM,QAAN,GAAiB,CAAjB;AACAN,EAAAA,KAAK,CAACO,SAAN,GAAkB,IAAlB;;AAEA,SAAOJ,aAAa,CAACK,MAAd,GAAuB,CAA9B,EAAiC;AAC7BC,IAAAA,SAAS,CAACN,aAAD,CAAT;AACA,UAAMO,WAAW,GAAGP,aAAa,CAACQ,KAAd,EAApB;AACAD,IAAAA,WAAW,CAACH,SAAZ,GAAwB,IAAxB;AACAF,IAAAA,WAAW,CAACO,IAAZ,CAAiBF,WAAjB;AACA,QAAIA,WAAW,KAAKT,GAApB,EAAyB,OAAOI,WAAP;AACzBQ,IAAAA,YAAY,CAACH,WAAD,EAAcR,IAAd,CAAZ;AACH;AACJ,C,CAED;;AACA,SAASE,QAAT,CAAkBF,IAAlB,EAAwB;AACpB,QAAMY,OAAO,GAAG,EAAhB;;AACA,OAAK,MAAMC,GAAX,IAAkBb,IAAlB,EAAwB;AACpB,SAAK,MAAMc,IAAX,IAAmBD,GAAnB,EAAwB;AACpBD,MAAAA,OAAO,CAACF,IAAR,CAAaI,IAAb;AACH;AACJ;;AACD,SAAOF,OAAP;AACH;;AAED,SAASL,SAAT,CAAmBQ,cAAnB,EAAmC;AAC/BA,EAAAA,cAAc,CAACC,IAAf,CAAoB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACb,QAAF,GAAac,CAAC,CAACd,QAA7C;AACH;;AAED,SAASO,YAAT,CAAsBG,IAAtB,EAA4Bd,IAA5B,EAAkC;AAC9B;AACA,OAAK,MAAMmB,CAAX,IAAgB,CAAC,CAAC,CAAD,EAAI,CAAC,CAAL,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAgB,CAAC,CAAC,CAAF,EAAK,CAAL,CAAhB,EAAwB,CAAC,CAAD,EAAI,CAAJ,CAAxB,CAAhB,EAAiD;AAC7C,UAAMC,IAAI,GAAG,CAACN,IAAI,CAACD,GAAL,GAAWM,CAAC,CAAC,CAAD,CAAb,EAAkBL,IAAI,CAACO,GAAL,GAAWF,CAAC,CAAC,CAAD,CAA9B,CAAb,CAD6C,CAE7C;;AACA,QAAGC,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV,IAAeA,IAAI,CAAC,CAAD,CAAJ,GAAUpB,IAAI,CAACM,MAAL,GAAY,CAArC,IAA0Cc,IAAI,CAAC,CAAD,CAAJ,GAAU,CAApD,IAAyDA,IAAI,CAAC,CAAD,CAAJ,GAAUpB,IAAI,CAACM,MAAL,GAAY,CAAlF,EAAoF;AAAC;AAAS;;AAAA;AAE9F,UAAMgB,QAAQ,GAAGtB,IAAI,CAACoB,IAAI,CAAC,CAAD,CAAL,CAAJ,CAAcA,IAAI,CAAC,CAAD,CAAlB,CAAjB;;AAEA,QAAG,CAACE,QAAQ,CAACC,MAAV,IAAoB,CAACD,QAAQ,CAACjB,SAAjC,EAA4C;AAExCiB,MAAAA,QAAQ,CAAClB,QAAT,GAAoBU,IAAI,CAACV,QAAL,GAAgB,CAApC;AACAkB,MAAAA,QAAQ,CAACE,QAAT,GAAoBV,IAApB;AACH;AACJ;AACJ;;AAED,OAAO,SAASW,eAAT,CAAyBC,OAAzB,EAAiC;AACpCC,EAAAA,IAAI,GAAG,EAAP;AACA,MAAInB,WAAW,GAAGkB,OAAlB;;AACA,SAAMlB,WAAW,IAAI,IAArB,EAA0B;AACtBmB,IAAAA,IAAI,CAACjB,IAAL,CAAUF,WAAV;AACAA,IAAAA,WAAW,GAAGA,WAAW,CAACgB,QAA1B;AACH;AACJ","sourcesContent":["export function dijkstra(start, end, grid) {\r\n    let unvistedNodes = getNodes(grid);\r\n    let vistedNodes = [];\r\n    start.distance = 0;\r\n    start.isVisited = true;\r\n\r\n    while (unvistedNodes.length > 0) {\r\n        sortNodes(unvistedNodes);\r\n        const currentNode = unvistedNodes.shift();\r\n        currentNode.isVisited = true;\r\n        vistedNodes.push(currentNode);\r\n        if (currentNode === end) return vistedNodes;\r\n        getNeighbors(currentNode, grid);\r\n    }\r\n}\r\n\r\n//turns the 2d array into a 1d array for easier usage\r\nfunction getNodes(grid) {\r\n    const newGrid = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            newGrid.push(node);\r\n        }\r\n    }\r\n    return newGrid;\r\n}\r\n\r\nfunction sortNodes(unvisitedNodes) {\r\n    unvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n}\r\n\r\nfunction getNeighbors(node, grid) {\r\n    // prettier-ignore\r\n    for (const i of [[0, -1],[0, 1],[-1, 0],[1, 0]]) {\r\n        const temp = [node.row + i[0], node.col + i[1]];\r\n        // check if the neighbor node is within the grid bounds\r\n        if(temp[0] < 0 || temp[0] > grid.length-1 || temp[1] < 0 || temp[1] > grid.length-1){continue};\r\n        \r\n        const neighbor = grid[temp[1]][temp[0]];\r\n        \r\n        if(!neighbor.isWall && !neighbor.isVisited) {\r\n            \r\n            neighbor.distance = node.distance + 1;\r\n            neighbor.prevNode = node; \r\n        }\r\n    }\r\n}\r\n\r\nexport function getShortestPath(endNode){\r\n    path = [];\r\n    let currentNode = endNode;\r\n    while(currentNode != null){\r\n        path.push(currentNode);\r\n        currentNode = currentNode.prevNode\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}