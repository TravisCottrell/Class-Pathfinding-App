{"ast":null,"code":"export function dijkstra(start, end, grid) {\n  let unvistedNodes = getNodes(grid);\n  let vistedNodes = [];\n  start.distance = 0; //while (unvistedNodes.length >= 0) {\n\n  sortNodes(unvistedNodes);\n  console.log(unvistedNodes);\n  const currentNode = unvistedNodes.shift();\n  console.log(\"currentnode\", currentNode);\n  const neighbors = getNeighbors(currentNode, grid); //}\n} //turns the 2d array into a 1d array for easier usage\n\nfunction getNodes(grid) {\n  const newGrid = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      newGrid.push(node);\n    }\n  }\n\n  return newGrid;\n}\n\nfunction sortNodes(unvisitedNodes) {\n  unvisitedNodes.sort((a, b) => a.distance - b.distance);\n}\n\nfunction getNeighbors(node, grid) {\n  const neighbors = []; // prettier-ignore\n\n  for (const i of [[0, -1], [0, 1], [-1, 0], [1, 0]]) {\n    const temp = [node.row + i[0], node.col + i[1]];\n    const neighbor = grid[temp[0]][temp[1]];\n\n    if (neighbor != undefined && !neighbor.isWall) {\n      neighbors.push(neighbor);\n    }\n  }\n\n  console.log(neighbors);\n  return neighbors;\n}","map":{"version":3,"sources":["C:/My Projects/pathing-Algorithms/react-app/src/algorithms/dijkstra.js"],"names":["dijkstra","start","end","grid","unvistedNodes","getNodes","vistedNodes","distance","sortNodes","console","log","currentNode","shift","neighbors","getNeighbors","newGrid","row","node","push","unvisitedNodes","sort","a","b","i","temp","col","neighbor","undefined","isWall"],"mappings":"AAAA,OAAO,SAASA,QAAT,CAAkBC,KAAlB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoC;AACvC,MAAIC,aAAa,GAAGC,QAAQ,CAACF,IAAD,CAA5B;AACA,MAAIG,WAAW,GAAG,EAAlB;AACAL,EAAAA,KAAK,CAACM,QAAN,GAAiB,CAAjB,CAHuC,CAKvC;;AACAC,EAAAA,SAAS,CAACJ,aAAD,CAAT;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYN,aAAZ;AACA,QAAMO,WAAW,GAAGP,aAAa,CAACQ,KAAd,EAApB;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BC,WAA3B;AACA,QAAME,SAAS,GAAGC,YAAY,CAACH,WAAD,EAAcR,IAAd,CAA9B,CAVuC,CAYvC;AACH,C,CAED;;AACA,SAASE,QAAT,CAAkBF,IAAlB,EAAwB;AACpB,QAAMY,OAAO,GAAG,EAAhB;;AACA,OAAK,MAAMC,GAAX,IAAkBb,IAAlB,EAAwB;AACpB,SAAK,MAAMc,IAAX,IAAmBD,GAAnB,EAAwB;AACpBD,MAAAA,OAAO,CAACG,IAAR,CAAaD,IAAb;AACH;AACJ;;AACD,SAAOF,OAAP;AACH;;AAED,SAASP,SAAT,CAAmBW,cAAnB,EAAmC;AAC/BA,EAAAA,cAAc,CAACC,IAAf,CAAoB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACd,QAAF,GAAae,CAAC,CAACf,QAA7C;AACH;;AAED,SAASO,YAAT,CAAsBG,IAAtB,EAA4Bd,IAA5B,EAAkC;AAC9B,QAAMU,SAAS,GAAG,EAAlB,CAD8B,CAE9B;;AACA,OAAK,MAAMU,CAAX,IAAgB,CAAC,CAAC,CAAD,EAAI,CAAC,CAAL,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAgB,CAAC,CAAC,CAAF,EAAK,CAAL,CAAhB,EAAwB,CAAC,CAAD,EAAI,CAAJ,CAAxB,CAAhB,EAAkD;AAC9C,UAAMC,IAAI,GAAG,CAACP,IAAI,CAACD,GAAL,GAAWO,CAAC,CAAC,CAAD,CAAb,EAAkBN,IAAI,CAACQ,GAAL,GAAWF,CAAC,CAAC,CAAD,CAA9B,CAAb;AACA,UAAMG,QAAQ,GAAGvB,IAAI,CAACqB,IAAI,CAAC,CAAD,CAAL,CAAJ,CAAcA,IAAI,CAAC,CAAD,CAAlB,CAAjB;;AAEI,QAAIE,QAAQ,IAAIC,SAAZ,IAAyB,CAACD,QAAQ,CAACE,MAAvC,EAA+C;AAC/Cf,MAAAA,SAAS,CAACK,IAAV,CAAeQ,QAAf;AACH;AACJ;;AACDjB,EAAAA,OAAO,CAACC,GAAR,CAAYG,SAAZ;AACA,SAAOA,SAAP;AACH","sourcesContent":["export function dijkstra(start, end, grid) {\r\n    let unvistedNodes = getNodes(grid);\r\n    let vistedNodes = [];\r\n    start.distance = 0;\r\n\r\n    //while (unvistedNodes.length >= 0) {\r\n    sortNodes(unvistedNodes);\r\n    console.log(unvistedNodes);\r\n    const currentNode = unvistedNodes.shift();\r\n    console.log(\"currentnode\", currentNode);\r\n    const neighbors = getNeighbors(currentNode, grid);\r\n\r\n    //}\r\n}\r\n\r\n//turns the 2d array into a 1d array for easier usage\r\nfunction getNodes(grid) {\r\n    const newGrid = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            newGrid.push(node);\r\n        }\r\n    }\r\n    return newGrid;\r\n}\r\n\r\nfunction sortNodes(unvisitedNodes) {\r\n    unvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n}\r\n\r\nfunction getNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    // prettier-ignore\r\n    for (const i of [[0, -1],[0, 1],[-1, 0],[1, 0],]) {\r\n        const temp = [node.row + i[0], node.col + i[1]];\r\n        const neighbor = grid[temp[0]][temp[1]];\r\n\r\n            if (neighbor != undefined && !neighbor.isWall) {\r\n            neighbors.push(neighbor);\r\n        }\r\n    }\r\n    console.log(neighbors);\r\n    return neighbors;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}