{"ast":null,"code":"export function recursiveDivision(grid, row, col, height, width, orientation) {\n  if (width < 2 || height < 2) return;\n  let isHorizontal = orientation; //get the column or row that a wall will be drawn in\n\n  const wallrow = node.row + (isHorizontal ? 0 : Math.floor(Math.random() * width - 2));\n  const wallcol = node.col + (isHorizontal ? Math.floor(Math.random() * height - 2) : 0);\n  console.log(\"wallrow\", wallrow);\n  console.log(\"wallcol\", wallcol); //random node in the wall will be selected as a passage\n\n  const passageRow = wallrow + (isHorizontal ? Math.floor(Math.random() * width) : 0);\n  const passageCol = wallcol + (isHorizontal ? 0 : Math.floor(Math.random() * height));\n  console.log(\"passrow\", passageRow);\n  console.log(\"passcol\", passageCol); //draw the wall\n\n  if (isHorizontal) {\n    for (let i = 0; i < width; i++) {\n      grid[i][wallcol].isWall = true;\n    }\n  } else {\n    for (let i = 0; i < height; i++) {\n      grid[wallrow][i].isWall = true;\n    }\n  }\n\n  grid[passageRow][passageCol].isWall = false;\n}\nexport function getOrientation(height, width) {\n  if (width < height) {\n    //is horizontal\n    return true;\n  } else if (height < width) {\n    // is vertical\n    return false;\n  } else {\n    const rand = Math.floor(Math.random() * 2);\n    return rand === 0 ? true : false;\n  }\n}","map":{"version":3,"sources":["C:/My Projects/pathing-Algorithms/react-app/src/algorithms/mazeGen/recursiveDivision.js"],"names":["recursiveDivision","grid","row","col","height","width","orientation","isHorizontal","wallrow","node","Math","floor","random","wallcol","console","log","passageRow","passageCol","i","isWall","getOrientation","rand"],"mappings":"AAAA,OAAO,SAASA,iBAAT,CAA2BC,IAA3B,EAAgCC,GAAhC,EAAqCC,GAArC,EAA0CC,MAA1C,EAAkDC,KAAlD,EAAyDC,WAAzD,EAAqE;AACxE,MAAGD,KAAK,GAAG,CAAR,IAAaD,MAAM,GAAG,CAAzB,EAA2B;AAE3B,MAAIG,YAAY,GAAGD,WAAnB,CAHwE,CAKxE;;AACA,QAAME,OAAO,GAAGC,IAAI,CAACP,GAAL,IAAYK,YAAY,GAAG,CAAH,GAAOG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBP,KAAhB,GAAwB,CAAnC,CAA/B,CAAhB;AACA,QAAMQ,OAAO,GAAGJ,IAAI,CAACN,GAAL,IAAYI,YAAY,GAAGG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBR,MAAhB,GAAyB,CAApC,CAAH,GAA4C,CAApE,CAAhB;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBP,OAAvB;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,OAAvB,EATwE,CAWxE;;AACA,QAAMG,UAAU,GAAGR,OAAO,IAAID,YAAY,GAAGG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBP,KAA3B,CAAH,GAAuC,CAAvD,CAA1B;AACA,QAAMY,UAAU,GAAGJ,OAAO,IAAIN,YAAY,GAAG,CAAH,GAAOG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBR,MAA3B,CAAvB,CAA1B;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,UAAvB;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBE,UAAvB,EAfwE,CAiBxE;;AACA,MAAGV,YAAH,EAAgB;AACZ,SAAI,IAAIW,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGb,KAAnB,EAA0Ba,CAAC,EAA3B,EAA8B;AAC1BjB,MAAAA,IAAI,CAACiB,CAAD,CAAJ,CAAQL,OAAR,EAAiBM,MAAjB,GAA0B,IAA1B;AACH;AACJ,GAJD,MAIK;AACD,SAAI,IAAID,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGd,MAAnB,EAA2Bc,CAAC,EAA5B,EAA+B;AAC3BjB,MAAAA,IAAI,CAACO,OAAD,CAAJ,CAAcU,CAAd,EAAiBC,MAAjB,GAA0B,IAA1B;AACH;AACJ;;AACDlB,EAAAA,IAAI,CAACe,UAAD,CAAJ,CAAiBC,UAAjB,EAA6BE,MAA7B,GAAsC,KAAtC;AAIH;AAED,OAAO,SAASC,cAAT,CAAwBhB,MAAxB,EAAgCC,KAAhC,EAAsC;AACzC,MAAGA,KAAK,GAAGD,MAAX,EAAkB;AAAC;AACf,WAAO,IAAP;AACH,GAFD,MAEM,IAAGA,MAAM,GAAGC,KAAZ,EAAkB;AAAE;AACtB,WAAO,KAAP;AACH,GAFK,MAED;AACD,UAAMgB,IAAI,GAAGX,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAb;AACA,WAAOS,IAAI,KAAK,CAAT,GAAc,IAAd,GAAqB,KAA5B;AACH;AACJ","sourcesContent":["export function recursiveDivision(grid,row, col, height, width, orientation){\r\n    if(width < 2 || height < 2)return ;\r\n\r\n    let isHorizontal = orientation;\r\n\r\n    //get the column or row that a wall will be drawn in\r\n    const wallrow = node.row + (isHorizontal ? 0 : Math.floor(Math.random() * width - 2));\r\n    const wallcol = node.col + (isHorizontal ? Math.floor(Math.random() * height - 2) : 0);\r\n    console.log(\"wallrow\", wallrow);\r\n    console.log(\"wallcol\", wallcol);\r\n\r\n    //random node in the wall will be selected as a passage\r\n    const passageRow = wallrow + (isHorizontal ? Math.floor(Math.random() * width) : 0);\r\n    const passageCol = wallcol + (isHorizontal ? 0 : Math.floor(Math.random() * height));\r\n    console.log(\"passrow\", passageRow);\r\n    console.log(\"passcol\", passageCol);\r\n\r\n    //draw the wall\r\n    if(isHorizontal){\r\n        for(let i = 0; i < width; i++){\r\n            grid[i][wallcol].isWall = true;\r\n        }\r\n    }else{\r\n        for(let i = 0; i < height; i++){\r\n            grid[wallrow][i].isWall = true;\r\n        }\r\n    }\r\n    grid[passageRow][passageCol].isWall = false;\r\n\r\n    \r\n    \r\n}\r\n\r\nexport function getOrientation(height, width){\r\n    if(width < height){//is horizontal\r\n        return true;\r\n    }else if(height < width){ // is vertical\r\n        return false;\r\n    }else{\r\n        const rand = Math.floor(Math.random() * 2);\r\n        return rand === 0  ? true : false;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}