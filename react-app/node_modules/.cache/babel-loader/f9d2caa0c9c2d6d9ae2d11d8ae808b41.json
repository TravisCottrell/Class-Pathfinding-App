{"ast":null,"code":"export function dfs(grid) {\n  const startNode = grid[15][15];\n  const visited = [];\n  const stack = [];\n  stack.push(startNode); //console.log(visited);\n\n  let i = 0;\n\n  while (i < 10) {\n    console.log('stack', stack);\n    const currentNode = stack.pop(); //console.log('currentNode', currentNode);\n\n    visited.push(currentNode);\n    const neighbors = getNeighbors(currentNode, grid, visited);\n\n    for (let i = neighbors.length; i > 0; i--) {\n      let temp = Math.floor(Math.random() * i);\n      temp = neighbors.splice(temp, 1);\n      stack.push();\n    }\n\n    currentNode.isWall = true;\n    i += 1;\n  }\n}\n\nfunction getNeighbors(node, grid, visited) {\n  // prettier-ignore\n  const neighbors = []; //console.log('node',node);\n\n  for (const i of [[0, -1], [0, 1], [-1, 0], [1, 0]]) {\n    const temp = [node.row + i[0], node.col + i[1]]; // check if the neighbor node is within the grid bounds\n    //console.log('temp',temp);\n\n    if (temp[0] < 0 || temp[0] > 29 || temp[1] < 0 || temp[1] > 49) {\n      continue;\n    }\n\n    ;\n    const neighbor = grid[temp[1]][temp[0]];\n\n    if (!visited.includes(neighbor)) {\n      neighbors.push(neighbor);\n    }\n  }\n\n  return neighbors;\n}","map":{"version":3,"sources":["C:/My Projects/pathing-Algorithms/react-app/src/algorithms/mazeGen/depthFirst.js"],"names":["dfs","grid","startNode","visited","stack","push","i","console","log","currentNode","pop","neighbors","getNeighbors","length","temp","Math","floor","random","splice","isWall","node","row","col","neighbor","includes"],"mappings":"AAEA,OAAO,SAASA,GAAT,CAAaC,IAAb,EAAkB;AACrB,QAAMC,SAAS,GAAGD,IAAI,CAAC,EAAD,CAAJ,CAAS,EAAT,CAAlB;AACA,QAAME,OAAO,GAAG,EAAhB;AACA,QAAMC,KAAK,GAAG,EAAd;AACAA,EAAAA,KAAK,CAACC,IAAN,CAAWH,SAAX,EAJqB,CAKrB;;AAEA,MAAII,CAAC,GAAG,CAAR;;AACA,SAAMA,CAAC,GAAG,EAAV,EAAa;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBJ,KAApB;AACA,UAAMK,WAAW,GAAGL,KAAK,CAACM,GAAN,EAApB,CAFS,CAGT;;AACAP,IAAAA,OAAO,CAACE,IAAR,CAAaI,WAAb;AACA,UAAME,SAAS,GAAGC,YAAY,CAACH,WAAD,EAAcR,IAAd,EAAoBE,OAApB,CAA9B;;AACA,SAAK,IAAIG,CAAC,GAAGK,SAAS,CAACE,MAAvB,EAA+BP,CAAC,GAAG,CAAnC,EAAsCA,CAAC,EAAvC,EAA0C;AACtC,UAAIQ,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBX,CAA3B,CAAX;AACAQ,MAAAA,IAAI,GAAIH,SAAS,CAACO,MAAV,CAAiBJ,IAAjB,EAAsB,CAAtB,CAAR;AACAV,MAAAA,KAAK,CAACC,IAAN;AACH;;AACDI,IAAAA,WAAW,CAACU,MAAZ,GAAqB,IAArB;AACAb,IAAAA,CAAC,IAAE,CAAH;AACH;AAEJ;;AAED,SAASM,YAAT,CAAsBQ,IAAtB,EAA4BnB,IAA5B,EAAkCE,OAAlC,EAA2C;AACvC;AACA,QAAMQ,SAAS,GAAG,EAAlB,CAFuC,CAGvC;;AACA,OAAK,MAAML,CAAX,IAAgB,CAAC,CAAC,CAAD,EAAI,CAAC,CAAL,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAgB,CAAC,CAAC,CAAF,EAAK,CAAL,CAAhB,EAAwB,CAAC,CAAD,EAAI,CAAJ,CAAxB,CAAhB,EAAiD;AAC7C,UAAMQ,IAAI,GAAG,CAACM,IAAI,CAACC,GAAL,GAAWf,CAAC,CAAC,CAAD,CAAb,EAAkBc,IAAI,CAACE,GAAL,GAAWhB,CAAC,CAAC,CAAD,CAA9B,CAAb,CAD6C,CAE7C;AACA;;AACA,QAAGQ,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV,IAAeA,IAAI,CAAC,CAAD,CAAJ,GAAU,EAAzB,IAA+BA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAzC,IAA8CA,IAAI,CAAC,CAAD,CAAJ,GAAU,EAA3D,EAA8D;AAAC;AAAS;;AAAA;AAExE,UAAMS,QAAQ,GAAGtB,IAAI,CAACa,IAAI,CAAC,CAAD,CAAL,CAAJ,CAAcA,IAAI,CAAC,CAAD,CAAlB,CAAjB;;AAEA,QAAG,CAACX,OAAO,CAACqB,QAAR,CAAiBD,QAAjB,CAAJ,EAAgC;AAC5BZ,MAAAA,SAAS,CAACN,IAAV,CAAekB,QAAf;AACH;AACJ;;AACD,SAAOZ,SAAP;AACH","sourcesContent":["\r\n\r\nexport function dfs(grid){\r\n    const startNode = grid[15][15];\r\n    const visited = [];\r\n    const stack = [];\r\n    stack.push(startNode);\r\n    //console.log(visited);\r\n\r\n    let i = 0;\r\n    while(i < 10){\r\n        console.log('stack',stack);\r\n        const currentNode = stack.pop();\r\n        //console.log('currentNode', currentNode);\r\n        visited.push(currentNode);\r\n        const neighbors = getNeighbors(currentNode, grid, visited);\r\n        for (let i = neighbors.length; i > 0; i--){\r\n            let temp = Math.floor(Math.random() * i);\r\n            temp =  neighbors.splice(temp,1)\r\n            stack.push();\r\n        }\r\n        currentNode.isWall = true;\r\n        i+=1;\r\n    }\r\n\r\n}\r\n\r\nfunction getNeighbors(node, grid, visited) {\r\n    // prettier-ignore\r\n    const neighbors = [];\r\n    //console.log('node',node);\r\n    for (const i of [[0, -1],[0, 1],[-1, 0],[1, 0]]) {\r\n        const temp = [node.row + i[0], node.col + i[1]];\r\n        // check if the neighbor node is within the grid bounds\r\n        //console.log('temp',temp);\r\n        if(temp[0] < 0 || temp[0] > 29 || temp[1] < 0 || temp[1] > 49){continue};\r\n        \r\n        const neighbor = grid[temp[1]][temp[0]];\r\n        \r\n        if(!visited.includes(neighbor)) {\r\n            neighbors.push(neighbor);\r\n        }\r\n    }\r\n    return neighbors;\r\n}"]},"metadata":{},"sourceType":"module"}